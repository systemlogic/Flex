import com.emc.ecuit.flex.components.application.AppTitleBar;
import com.emc.ecuit.flex.components.application.Breadcrumb;
import com.emc.ecuit.flex.components.application.BreadcrumbBar;
import com.emc.ecuit.flex.components.application.BreadcrumbEvent;
import com.emc.ecuit.flex.components.application.ProgressMonitor;
import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
import com.emc.ecuit.flex.events.ECUITEvent;
import com.emc.efx.UxConstants;
import com.emc.efx.core.extensionmgr.UxExtensionManager;
import com.emc.efx.services.navigation.IUxNavigationService;
import com.emc.efx.utilities.map.UxHashMap;
import com.emc.fma.views.Utility.UtilityFunctionClass;
import com.emc.fma.utils.Common;
import com.emc.fma.utils.RESTClient;
import com.emc.fma.utils.RESTEvent;
import com.emc.fma.model.SchemaManager.SchemaConverter;
import com.emc.fma.model.SchemaManager.vo.DataDomainVO;

import flash.sampler.NewObjectSample;

import mx.collections.ArrayCollection;
import mx.controls.AdvancedDataGrid;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.managers.PopUpManager;
import mx.resources.ResourceManager;
import mx.controls.Alert;

[Bindable] public var Server:String;
[Bindable] public var ServerType:String;

[Bindable] private var IPs:ArrayCollection = new ArrayCollection();
private var _dataDomainVO:DataDomainVO = null;
private var _currentPayload:UxHashMap = null;

override protected function initializeData():void
{
  super.initializeData();
  Common.setFocusOnFirstChild(this);

  if ( currentPayload != null )
  {
    var dataObj:String = currentPayload.getValue("ServerType");

    if ( dataObj != null )
    {
      Server = currentPayload.getValue("Server");
      ServerType = currentPayload.getValue("ServerType");
      viewBlock.title=ServerType + " "+ ResourceManager.getInstance().getString('fma','FIL_SER_PRP');

      // Send GET request to the server
      RESTClient.sendGetRequest("/api/server/"+Server, OnGetServerStatus, viewBlock);
    }
  }
}

private function OnGetServerStatus(event:RESTEvent):void
{
  if ( event.hasStandardResponse )
  {
    Common.showResponseMessage(this, event, onCancel);
    return;
  }
  trace(event.response);

  try
  {
    var serverType:String = event.response.children()[0].localName();
    if ( serverType != ServerType )
      throw new Error("Expecting " + ServerType + " server, but returned " + serverType);

    _dataDomainVO = SchemaConverter.XMLtoVO(serverType, event.response);
    if ( _dataDomainVO == null )
      throw new Error("Error converting XML to DataDomainVO.\n" + event.response.toXMLString());

    nameForm.FileServerName.text = _dataDomainVO.Name;
    for each ( var ip:String in _dataDomainVO.IP )
      IPs.addItem(ip);

    cifsForm.setData(_dataDomainVO.Cifs);
  }
  catch (error:Error)
  {
    Common.showErrorDialog(this, error.message, onCancel);
  }
}

private function page_keyDownHandler(event:KeyboardEvent):void
{
  if (event.keyCode == Keyboard.ESCAPE)
    onCancel(new MouseEvent(MouseEvent.CLICK));
}

[Bindable]
public function set currentPayload(value:UxHashMap):void
{
  _currentPayload = value;
}

public function get currentPayload():UxHashMap
{
  return _currentPayload;
}

private function init():void
{
}

private function titleWindow_close(evt:CloseEvent):void
{
  PopUpManager.removePopUp(this);
}

private function onCancel(event:Event):void
{
  var navService:IUxNavigationService =
  UxExtensionManager.getInstance().getService(UxConstants.
  NAVIGATION_SERVICE) as IUxNavigationService;
  var location:Array = new Array;
  location = navService.currentLocation;
  location.pop();
  navService.navigate(location);
}

private function onOK(event:MouseEvent):void
{
  if ( _dataDomainVO == null )
  {
    Common.showErrorDialog(this, "Cannot save the changes as getting server details failed");
    return;
  }

  var _tmpArray:Array = new Array();
  for each ( var _tmpip:String in IPs )
    _tmpArray.push(_tmpip);

  // Create and populate VO object
  _dataDomainVO.Name = nameForm.FileServerName.text;
  _dataDomainVO.IP = new ArrayCollection(_tmpArray); 
  cifsForm.getData(_dataDomainVO.Cifs);

  // Validate VO object
  if ( _dataDomainVO.IP.length == 0 )
  {
    ECUITPopupDialog.showMessageDialog(this,ResourceManager.getInstance().getString('fma','EMPTY_IPLIST'),ResourceManager.getInstance().getString('fma','EMPTY_IPLIST_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
    viewstack2.selectedIndex = 0; 
    return;
  }

  var validationMsg:String;

  // Validate CIFS credentials
  if ( null != (validationMsg = _dataDomainVO.Cifs.validate(false)) )
  {
    viewstack2.selectedIndex = 1;
    ECUITPopupDialog.showMessageDialog(this, validationMsg, ResourceManager.getInstance().getString('fma','ERROR'), ECUITPopupDialog.ERROR_MESSAGE);
    return;
  }

  var xml:XML = SchemaConverter.VOtoXML("FileServers", _dataDomainVO);
  trace(xml);

  RESTClient.sendPutRequest("/api/server/" + _dataDomainVO.Name, xml, OnSaveStatus, viewBlock);
}
        
private function OnSaveStatus(event:RESTEvent):void
{
  Common.showResponseMessage(this, event, onCancel);
}

public function addIP():void
{
  var address:String = ip.address[0] + "." + 
                       ip.address[1] + "." + 
                       ip.address[2] + "." + 
                       ip.address[3];
  trace(address.search(UtilityFunctionClass.IPAddresspattern));

  if (address.search(UtilityFunctionClass.IPAddresspattern) == 0)
  {
    IPs.addItem(address);
    ip.address1.text = "";
    ip.address2.text = "";
    ip.address3.text = "";
    ip.address4.text = "";
    add.enabled = false;
  }
  else
  {
    ECUITPopupDialog.showMessageDialog(this,ResourceManager.getInstance().getString('fma','INVALID_IP'),ResourceManager.getInstance().getString('fma','INVALID_IP_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
    return;
  }
}

public function delIP():void
{
  if (ips.selectedItem == null)
    ECUITPopupDialog.showMessageDialog(this,ResourceManager.getInstance().getString('fma','INVALID_DELETION'),ResourceManager.getInstance().getString('fma','INVALID_IP_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
  else
    IPs.removeItemAt(ips.selectedIndex);
}

protected function ip_creationCompleteHandler(event:FlexEvent):void
{
  ip.address1.addEventListener(KeyboardEvent.KEY_UP,ipAddressChangeHandler);
  ip.address2.addEventListener(KeyboardEvent.KEY_UP,ipAddressChangeHandler);
  ip.address3.addEventListener(KeyboardEvent.KEY_UP,ipAddressChangeHandler);
  ip.address4.addEventListener(KeyboardEvent.KEY_UP,ipAddressChangeHandler);
}

private function ipAddressChangeHandler(event:KeyboardEvent):void
{
  var address:String = ip.address1.text + "." + 
                       ip.address2.text + "." + 
                       ip.address3.text + "." + 
                       ip.address4.text;

  if ( !ips.dataProvider.contains(address) && (address.search(UtilityFunctionClass.IPAddresspattern) == 0) )
    add.enabled = true;
  else
    add.enabled = false;
}

protected function _UpdateClickHandler(event:MouseEvent):void
{
  RESTClient.sendGetRequest("/api/resolve/" + nameForm.FileServerName.text, OnGetIPStatus, viewBlock);
}

private function OnGetIPStatus(event:RESTEvent):void
{
  if ( Common.showResponseMessage(this, event) )
    return;

  var ipString:String = event.response.IP[0].toString();

  if ( UtilityFunctionClass.IPAddresspattern.test(ipString) )
    ip.address = ipString.split(".");
  else
    ECUITPopupDialog.showMessageDialog(this, ipString, ResourceManager.getInstance().getString('fma','CLIENT_ALR'), ECUITPopupDialog.INFORMATION_MESSAGE);
}
