package com.emc.fma.views.Utility
{
  import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
  import com.emc.ecuit.flex.managers.ECUITResourceManager;
  
  import flash.utils.Dictionary;
  
  import mx.collections.ArrayCollection;
  import mx.resources.ResourceManager;
  
  public class UtilityFunctionClass
  {
    public static const TRUE:String 								= "true" ;
    public static const YES:String 								= "yes" ;
    public static const NO:String 								= "no" ;
    public static const DETAILED:String 							= "detailed" ;
    public static const IMPORTLOGS:String 						= "importLog" ;
    public static const EXITFAILURECOUNT:String 					= "1000" ;
    public static const ATMOS:String 								= "atmos" ;
    public static const AMAZON:String 							= "amazons3" ;
    public static const AZURE:String 							= "azure" ;
    public static const ALL:String								= "all"
    public static const EMAIL:String								= "emailOnly"
    public static const SNMP:String								= "snmpOnly"
    public static const EDIT:String								= "edit" ;
    public static const SAVE:String								= "Save" ;
    public static const ENABLED:String							= "enabled" ;
    public static const DISABLED:String							= "disabled" ;
    public static const INCLUDED:String							= "included" ;
    public static const NOTINCLUDED:String						= "not included" ;
    public static const INDEX:String								= "Index" ;
    public static const PATTERN:String							= "Pattern" ;
    public static const DESCRIPTION:String						= "Description" ;
    public static const STATUS:String								= ResourceManager.getInstance().getString('fma','SCH_STA') ;
    public static const INCLUDE_SUMMARY:String					= "Included in Summary" ;
    public static const DEFULT_THROTTLE:String					= "Default Throttle Time" ;
    public static const CURRENT_THROTTLE:String					= "Current Throttle Time" ;
    public static const PENDING_KEY:String						= "pending" ;

    public static const DomainRestrict:String						= "A-Za-z0-9\\.\\-" ;
    public static const PortRestrict:String						= "0-9" ;
    public static const DaysRestrict:String						= "0-9" ;
    public static const AccessBucketRestrict:String				= "A-Za-z0-9\\.\\-"
    public static const URLRestrict:String						= "A-Za-z0-9\\.\\-:/"
    
    public static const ContainerRestrict:String				= "A-Za-z0-9\\.\\-"
    public static const AccountNameRestrict:String				= "A-Za-z0-9\\.\\-"
    
    public static const IPAddresspattern:RegExp = /\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/;  
    //public static const UnixPath:RegExp = new RegExp("^((?:\/[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*(?:\-[a-zA-Z0-9-/-]+)*)+(\/?))", "im") ;					//	/^((\/)|(\/[^\/]+)+)$/ ; 				// /\/(\w)*/ ;
    
    public static const UnixPath:RegExp = /(^((?:\/[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*(?:\-[a-zA-Z0-9-\/-]+)*)+(\/?)))|(^((?:\\[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*(?:\\[a-zA-Z0-9-\\-]+)*)+(\\?)))$/i;
    
    public static const DotSeprated:RegExp = /^[a-zA-Z0-9][a-zA-Z0-9\-]+[a-zA-Z0-9](\.[a-zA-Z0-9]+)+$/;  /*/(([^\.]+)+)$/ ;*/ 				// /\/(\w)*/ ;
    public static const Domain:RegExp = /^(([a-zA-Z0-1]+)|([a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+))$/;
    public static const URL:RegExp = /(ftp|http|https|file):\/\/[\S]+(\b|$).(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)/i;
    public static const WebURL:RegExp = /(http|https):\/\/[^\/\.]+(\.[^\/\.]+)*\.(com|COM)$/i;
    public static const EMailPattern:RegExp = /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\.)+[A-Z]{2,4}$/i;
    public static const TWELE:int		=	12 ;
    public static const SECURITYARRAY:ArrayCollection = new ArrayCollection(new Array("v1","v2c"));
    
    
    /**
     * Restrict to Maximum 1-254 Characters [(?=^.{1,254}$)]
     * Start Match [(^]  + Define a matching group [(?:] + All domain level can have [[0-9a-zA-Z_\-]+\.] 
     * Check position after second dot, blank means no restriction on number of dots [{2,}]
     * Define new group to check top level domain (TLD) to be only alphabets of minimum length of 2
     * Valid Values - abc.co.uk, a-b.co.uk, a_b.co.uk, 10.10.11.62.india3.prv, 123.co.uk (all were created successfully in DNS)
     * Invalid Values - a%b.co.uk, a.bc (as no second dot is available)
     */
    public static const DottedDomainName:RegExp = /(?=^.{1,254}$)^(?:[0-9a-zA-Z_\-]+\.){2,}(?:[a-zA-Z]{2,}+)$/;
    
    /**
     * Define RegExp and Map the errorToolTip Message with the same name in fma.properties file
     */
    // General
    public static const NUMERICREGEXP:RegExp = /^[0-9]+$/;
    public static const ALPHABETSREGEXP:RegExp = /[a-zA-z]/;
    public static const ALPHANUMERICREGEXP:RegExp = /[a-zA-z0-9]/;
    public static const HOSTNAMEREGEXP:RegExp = /[a-zA-z0-9_\-]/;
    
    // Policy Regular Expressions 
    public static const POLICYNAMEREGEXP:RegExp = /[\/\\<>'*"?;]/;      
    public static const FILENAMEEQUALSREGEXP:RegExp = /[\/]/;
    public static const FILENAMEREGEXP:RegExp = /.*/;    
    public static const DIRNAMEEQUALSREGEXP:RegExp = /^(\/[^\/]+)+\/$/;
    public static const DIRNAMEREGEXP:RegExp = /.*/;
    public static const DIRNAMESINGLEREGEXP:RegExp = /^(\/[^\/]+)+$/;
	
	  public static const UsernameRestrict:RegExp					= HOSTNAMEREGEXP ;
    public static const PasswordRestrict:String				= "^\ "
    //Time Parser (HH:MM), Date Parser (YYYY-MM-DD), Day Parser
    public static const TIMEPARSER:RegExp = /([0-1]?[0-9]|2[0-4]):([0-5][0-9])?/;    
    public static const DATEPARSER:RegExp = /\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])+/;
    public static const MONTHPARSER:RegExp =/[0-9]+ month/;
    public static const WEEKDAYPARSER:RegExp =/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun)/;
    public static const WEEKPARSER:RegExp =/[0-9] weeks/;
    public static const DAYPARSER:RegExp =/Day [0-9]+/;
    
    
    private var allRegEx:Dictionary;    
    private static var singleton:UtilityFunctionClass = new UtilityFunctionClass();
    
    public function UtilityFunctionClass()
    {
      allRegEx = new Dictionary();
      // General
      allRegEx["NUMERICREGEXP"] = NUMERICREGEXP;
      allRegEx["ALPHABETSREGEXP"] = ALPHABETSREGEXP;
      allRegEx["ALPHANUMERICREGEXP"] = ALPHANUMERICREGEXP;
      allRegEx["HOSTNAMEREGEXP"] = HOSTNAMEREGEXP;
      // Policy Regular Expressions 
      allRegEx["POLICYNAMEREGEXP"] = POLICYNAMEREGEXP;
      allRegEx["FILENAMEEQUALSREGEXP"] = FILENAMEEQUALSREGEXP;
      allRegEx["FILENAMEREGEXP"] = FILENAMEREGEXP;
      allRegEx["DIRNAMEEQUALSREGEXP"] = DIRNAMEEQUALSREGEXP;
      allRegEx["DIRNAMEREGEXP"] = DIRNAMEREGEXP;
      allRegEx["DIRNAMESINGLEREGEXP"] = DIRNAMESINGLEREGEXP;
    }
    
    public static function getRegEx(key:String):RegExp
    {
      return UtilityFunctionClass.singleton.allRegEx[key] as RegExp;
    }
    
    public static function formatDate(number:int):String{
      var str:String = number.toString();
      if(str.length == 1){
        return "0" + str ;
      }else{
        return str ;
      }
    }
    public static function formatMonth(number:int):String{
      var str:String = (number +1 ).toString();
      if(str.length == 1){
        return "0" + str ;
      }else{
        return str ;
      }
    }
    public static function formatTime(number:int):String{
      var str:String = number.toString();
      if(str.length == 1){
        return "0" + str ;
      }else{
        return str ;
      }
    }
    public static function formatHour(am_pm:String,hourText:String):int{
      return parseInt((am_pm == ECUITResourceManager.getInstance().getString("AM")) ? 
        ((parseInt(hourText) == TWELE ) ? (parseInt(hourText) - TWELE).toString() : parseInt(hourText).toString()) :
        ((parseInt(hourText) == TWELE ) ? parseInt(hourText).toString()  : (parseInt(hourText) + TWELE).toString())  ) ;
    }
  }
}