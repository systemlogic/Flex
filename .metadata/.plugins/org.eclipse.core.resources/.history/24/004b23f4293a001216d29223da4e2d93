<?xml version="1.0" encoding="utf-8"?>
<UxVBoxWindow xmlns="com.emc.fma.UxExtendedClass.*" 
			  xmlns:fxs="http://ns.adobe.com/mxml/2009" 
			  xmlns:s="library://ns.adobe.com/flex/spark" 
			  xmlns:mx="library://ns.adobe.com/flex/mx"
			  xmlns:ux="com.emc.efx.guitoolkit.components.boxes.*"
			  implements="com.emc.efx.services.navigation.IUxWorkingPageContainer"
			  xmlns:views="com.emc.efx.guitoolkit.components.views.*" 
			  xmlns:FileServer="com.emc.fma.views.Configuration.FileServer.*" 
			  xmlns:section="com.emc.efx.services.layout.section.*" 
			  xmlns:combobox="com.emc.efx.guitoolkit.components.combobox.*" 
			  xmlns:action="com.emc.efx.guitoolkit.action.*" 
			  xmlns:details="com.emc.efx.guitoolkit.components.details.*" 
			  xmlns:dataview="com.emc.efx.guitoolkit.components.views.dataview.*" 
			  xmlns:model="com.emc.fma.views.Configuration.FileServer.model.*">
	<fxs:Script>
		<![CDATA[
			import com.emc.ecuit.flex.components.application.ProgressMonitor;
			import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
			import com.emc.ecuit.flex.components.filter.FilterPanel;
			import com.emc.ecuit.flex.components.table.ECUITAdvancedDataGrid;
			import com.emc.ecuit.flex.components.table.ECUITAdvancedDataGridColumn;
			import com.emc.ecuit.flex.components.table.ECUITLinkButton;
			import com.emc.ecuit.flex.components.table.LinkButtonClickEvent;
			import com.emc.ecuit.flex.components.views.ViewBlock;
			import com.emc.ecuit.flex.components.views.ViewTitleBarButton;
			import com.emc.ecuit.flex.components.views.ViewTitleBarButtonEvent;
			import com.emc.ecuit.flex.events.ECUITPopupDialogEvent;
			import com.emc.efx.UxConstants;
			import com.emc.efx.core.extensionmgr.UxExtensionManager;
			import com.emc.efx.guitoolkit.components.table.UxAdvancedDataGridColumn;
			import com.emc.efx.guitoolkit.components.views.UxViewTitleButtonHandler;
			import com.emc.efx.guitoolkit.dataloading.UxLoadingEvent;
			import com.emc.efx.guitoolkit.displaybuilders.UxActionInformation;
			import com.emc.efx.guitoolkit.events.UxViewEvent;
			import com.emc.efx.net.UxURL;
			import com.emc.efx.net.UxURLRequest;
			import com.emc.efx.net.http.UxHttpClient;
			import com.emc.efx.net.http.events.UxHttpTimeoutEvent;
			import com.emc.efx.services.navigation.IUxNavigationService;
			import com.emc.efx.utilities.map.UxHashMap;
			import com.emc.fma.utils.RESTClient;
			import com.emc.fma.views.Configuration.FileServer.celerraFileServer;
			import com.emc.fma.views.Configuration.FileServer.centraFileServer;
			import com.emc.fma.views.Configuration.FileServer.dataDomainFileServer;
			import com.emc.fma.views.Configuration.FileServer.isilonFileServer;
			import com.emc.fma.views.Configuration.FileServer.model.FileServerModel;
			import com.emc.fma.views.Configuration.FileServer.model.FileServerViewModel;
			import com.emc.fma.views.Configuration.FileServer.netAppFileServer;
			import com.emc.fma.views.Configuration.FileServer.windowsFileServer;
			import com.emc.fma.views.Configuration.FileServer.wizard.AmazonS3.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.Atmos.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.Azure.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.Centera.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.DataDomain.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.Isilon.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.NetApp.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.ServerSelection;
			import com.emc.fma.views.Configuration.FileServer.wizard.Windows.ServerWizard;
			import com.emc.fma.views.Utility.Command;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Image;
			import mx.controls.Menu;
			import mx.core.BitmapAsset;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.utils.ArrayUtil;
			
			[Bindable]private var _client:UxHttpClient;
			[Bindable]public var ServerList:XML;
			private var _section:UxLazyLoadSection ;
			
			protected function _addFileServer(event:MouseEvent):void
			{
				var fss:FileServerSelection = new FileServerSelection();
				fss.centerDialog();
				fss.show(this.parent);
			}
			
			[Embed(source="../../../../../../../resources/images/assets/add_16x16.png")]
			[Bindable]
			public var addFileServer_16x16:Class;
			[Embed(source="../../../../../../../resources/images/assets/add_22x22.png")]
			[Bindable]
			public var addFileServer_22x22:Class;
			
			[Embed(source="../../../../../../../resources/images/file_server_32x32.png")]
			[Bindable]
			public var fileServer_32x32:Class;
			
			protected function _init(event:FlexEvent):void
			{
				var custViewTitleButton:ViewTitleBarButton = 
					new ViewTitleBarButton(ResourceManager.getInstance().getString('fma','ADD_BTN'), 
						ViewTitleBarButton.CUSTOM_BTN_TYPE, 0);
				custViewTitleButton.buttonMenuList = titleBarAddFileserverButtonMenuList;
				custViewTitleButton.buttonMenuEventHandler = add_clickHandler;
				viewBlock.addCustomTitleBarButton(custViewTitleButton);
				custViewTitleButton.setStyle("icon",addFileServer_22x22);  
				//custViewTitleButton.setStyle("overIcon", addFileServer_16x16); 
				// TODO Auto-generated method stub
			}
			
			protected function uxbutton1_clickHandler(event:MouseEvent):void
			{
				var wizard:Object = new com.emc.fma.views.Configuration.FileServer.wizard.ServerWizard();
				wizard.show(this);
			}
			
			[Bindable]private var serverSelected:String = ResourceManager.getInstance().getString('fma','NO_SELECT_SERVER') ;
			protected function add_clickHandler(event:MenuEvent):void{
				var wizard:Object ;
				serverSelected = event.label ;
				if(serverSelected == "AmazonS3"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.AmazonS3.ServerWizard();
				}else if(serverSelected == "Atmos"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Atmos.ServerWizard();
				}else if(serverSelected == "Azure"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Azure.ServerWizard();
				}else if(serverSelected == "Celerra"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard(ResourceManager.getInstance().getString('fma','CELERRA'));;
				}else if(serverSelected == "Centera"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Centera.ServerWizard();
				}else if(serverSelected == "Data Domain"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.DataDomain.ServerWizard();
				}else if(serverSelected == "Isilon"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Isilon.ServerWizard()
				}else if(serverSelected == "NetApp"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.NetApp.ServerWizard();
				}else if(serverSelected == "Windows"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Windows.ServerWizard();
				}else if(serverSelected == "VNX"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard(ResourceManager.getInstance().getString('fma','VNX'));
				}else if(serverSelected == "VNXe"){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard(ResourceManager.getInstance().getString('fma','VNXE'));
				}
				wizard.show(this);
			}
			protected function _viewTitleBarButtonClickHandler(event:ViewTitleBarButtonEvent):void
			{
				/* if(event.viewTitleBarButton.id.toString() == FILTER_BTN_I){
				
				}else if(event.viewTitleBarButton.id.toString() == EXPORT_BTN_ID){
				
				}else if(event.viewTitleBarButton.id.toString() == REFRESH_BTN_ID){
				
				} */ 
			}
			private function fileServerActionHandler(dataObj:Object,pageType:String,serverName:String,serverType:String):void {
				var navService:IUxNavigationService = UxExtensionManager.getInstance().getService(UxConstants.NAVIGATION_SERVICE) as IUxNavigationService;
				var map:UxHashMap = new UxHashMap();
				map.put(pageType, dataObj);
				map.put("ServerType", serverType);
				map.put("Server", serverName);
				var location:Array = new Array;
				_section.headerText = dataObj["key"];
				location = navService.currentLocation;
				location.push(pageType)
				navService.moveToChild(pageType, map);
			}
			private var myWatcher:ChangeWatcher ;
			private var verify:VerifyCelerra ;
			protected function _verifyFileServer(event:MouseEvent):void
			{
				var csip:String = fileServerList.selectedItem.Column5 ;
				var isso:String = fileServerList.selectedItem.Column3 ;
				var type:String = fileServerList.selectedItem.Column2 ;
				var name:String = fileServerList.selectedItem.Column1 ;
				_verify(csip,isso,type,name);
			}
			protected function _verifyFileServerTileView(event:MouseEvent):void
			{
				var csip:String = fileServerListTileView.selectedItem.csip ;
				var isso:String = fileServerListTileView.selectedItem.IsSource ;
				var type:String = fileServerListTileView.selectedItem.description ;
				var name:String = fileServerListTileView.selectedItem.name ;
				_verify(csip,isso,type,name);
			}
			private function _verify(csip:String,isso:String,type:String,name:String):void{
				if( (type == "Celerra" || type == "VNX" ) && isso == "yes" ){
					verify = new VerifyCelerra();
					myWatcher = ChangeWatcher.watch(verify, "xml", watcherListener);
					verify.fileServer = name ;
					verify.csip = csip ;
					verify.type = type ;
					verify.isso = isso ;
					verify.centerDialog(); 
					verify.show(this);
				}else{  //if(type == "Centera" || type == "NetApp" || type == "Windows" || type == "DataDomain"  || type == "Isilon" || type == "Atmos" || type == "AmazonS3" || type == "Azure")
          // Send verify request to the server
          var response:String = RESTClient.sendPostRequest("/api/verify/server/"+name, "");
   				viewBlock.updateProgress(100, "default");
		  		var dlg : ECUITPopupDialog = ECUITPopupDialog.showMessageDialog(this,(new XMLList(response)).Result[0].toString(),ResourceManager.getInstance().getString('fma','CLIENT_ALR') ,ECUITPopupDialog.INFORMATION_MESSAGE);
			  	dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleConfirmMessage);
				} 
			}
			
			public function watcherListener(event:Event):void {
        // Send verify request to the server
        var response:String = RESTClient.sendPostRequest("/api/verify/server/"+name, verify.xml);
 				viewBlock.updateProgress(100, "default");
    		var dlg : ECUITPopupDialog = ECUITPopupDialog.showMessageDialog(this,(new XMLList(response)).Result[0].toString(),ResourceManager.getInstance().getString('fma','CLIENT_ALR') ,ECUITPopupDialog.INFORMATION_MESSAGE);
		  	dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleConfirmMessage);
				myWatcher.unwatch();
			}
			
			protected function _detailFileServerTileView(event:MouseEvent):void
			{
				var type:String = fileServerListTileView.selectedItem.description ;
				var name:String = fileServerListTileView.selectedItem.name ;
				_detail(type,name);
			}
			protected function _detailFileServer(event:Event):void
			{
				var type:String = fileServerList.selectedItem.Column2 ;
				var name:String = fileServerList.selectedItem.Column1 ;
				_detail(type,name);
			}
			
			private function _detail(type:String,name:String):void{
				if(type == "Celerra"){
					_section = celerraPage ;
					fileServerActionHandler({key: name + "(" + type + ")" },celerraPage.key,name,type)
				}else if(type == "Centera"){
					_section = centeraPage ;
					fileServerActionHandler({key: name + "(" + type + ")" },centeraPage.key,name,type)
				}else if(type == "NetApp"){
					_section = netAppPage ;
					fileServerActionHandler({key: name + "(" + type + ")" },netAppPage.key,name,type)
				}else if(type == "Windows"){
					_section = windowsPage ;
					fileServerActionHandler({key: name + "(" + type + ")" },windowsPage.key,name,type)
				}else if(type == "DataDomain"){
					_section = dataDomainPage ;
					fileServerActionHandler({key: name + "(" + type + ")" },dataDomainPage.key,name,type)
				}else if(type == "Isilon"){
					_section = isilonPage ;
					fileServerActionHandler({key: name + "(" + type + ")" },isilonPage.key,name,type)
				}else if(type == "Atmos"){
					_section = atmosPage ;
					fileServerActionHandler({key: name+ "(" + type + ")" },atmosPage.key,name,type)
				}else if(type == "VNX"){
					_section = celerraPage ;
					fileServerActionHandler({key: name + "(" + type + ")" },celerraPage.key,name,type)
				}else if(type == "VNXe"){
					_section = celerraPage ;
					fileServerActionHandler({key: name + "(" + type + ")" },celerraPage.key,name,type)
				} else if(type == "AmazonS3"){
					_section = amazonS3Page ;
					fileServerActionHandler({key: name + "(" + type + ")" },amazonS3Page.key,name,type)
				} else if(type == "Azure"){
					_section = azurePage ;
					fileServerActionHandler({key: name + "(" + type + ")" },azurePage.key,name,type)
				} 
			}
			protected function _deleteFileServerTileView(event:MouseEvent):void
			{
				var type:String = fileServerListTileView.selectedItem.description ;
				var name:String = fileServerListTileView.selectedItem.name ;
				_delete(type,name);
			}
			protected function _deleteFileServer(event:MouseEvent):void
			{
				var type:String = fileServerList.selectedItem.Column2 ;
				var name:String = fileServerList.selectedItem.Column1 ;
				_delete(type,name);
			}
			private function _delete(type:String,name:String):void{
				var mess:String  = ResourceManager.getInstance().getString('fma','DEL_PREFIX') + name + ResourceManager.getInstance().getString('fma','DEL_MIDDLE') + type + ResourceManager.getInstance().getString('fma','DEL_SIFFIX') ;
				var dlg : ECUITPopupDialog = ECUITPopupDialog.showConfirmDialog(this,mess, "Delete", ECUITPopupDialog.YES_NO_OPTION );
				dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleYesNoDeleteResult);
			}
			
			private function handleYesNoDeleteResult(event:ECUITPopupDialogEvent) : void 
			{
				var name:String = fileServerList.selectedItem.Column1 ;

        // Send DELETE request to the server
        var response:String = RESTClient.sendDeleteRequest("/api/server/"+name);

				viewBlock.updateProgress(100, "default");
				var dlg : ECUITPopupDialog = ECUITPopupDialog.showMessageDialog(this,response,ResourceManager.getInstance().getString('fma','CLIENT_ALR') ,ECUITPopupDialog.INFORMATION_MESSAGE);
				dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleConfirmMessage);
			}
			private function handleConfirmMessage(event:ECUITPopupDialogEvent) : void 
			{
				 refereshGrid();
			}
			private function refereshGrid():void{
				viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.UNINITIALIZE_DATA));
				viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.INITIALIZE_DATA));
				viewBlock.lastRefreshDate = new Date();
			}
			private function onDelete(event:Event):void{
				viewBlock.updateProgress(100, "default");
				var dlg : ECUITPopupDialog = ECUITPopupDialog.showMessageDialog(this,(new XMLList(_client.response.body)).Result[0].toString(),ResourceManager.getInstance().getString('fma','CLIENT_ALR') ,ECUITPopupDialog.INFORMATION_MESSAGE);
				dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleConfirmMessage);
			}
			
			[Bindable]private var _rowsObject:Object = new Object();
			public var iconSelection:int = 1;
			
			public function get workingPages():Array {
				var workingPageArray:Array = new Array();
				workingPageArray.push(atmosPage);
				workingPageArray.push(celerraPage);
				workingPageArray.push(centeraPage);
				workingPageArray.push(dataDomainPage);
				workingPageArray.push(isilonPage);
				workingPageArray.push(netAppPage);
				workingPageArray.push(windowsPage);
				workingPageArray.push(amazonS3Page);
				workingPageArray.push(azurePage);
				return workingPageArray;
			}
			public function updateBackGround(serverName:String):void{
				refereshGrid();
			}
			protected function _clickHandlerFileServerModel(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
		]]>
	</fxs:Script>
	<fxs:Declarations>
		<fxs:XML format="e4x" id="titleBarAddFileserverButtonMenuList">
			<root>
				<menuitem  label="AmazonS3"/>
				<menuitem  label="Atmos"/> 
				<menuitem  label="Azure"/>
				<menuitem  label="Celerra"/> 
				<menuitem  label="Centera"/>
				<menuitem  label="Data Domain"/>
				<menuitem  label="Isilon"/>
				<menuitem  label="NetApp"/> 
				<menuitem  label="Windows"/> 
				<separator type="separator"/>
				<menuitem  label="VNX"/> 
				<menuitem  label="VNXe"/> 
			</root>
		</fxs:XML>
		<section:UxLazyLoadSection id="atmosPage" key="ATMOSPRO" headerText="@Resource(key='ATMOSPRO', bundle='fma')" 
								   contentClass="com.emc.fma.views.Configuration.FileServer.ATMOSFileServer"/>
		
		<section:UxLazyLoadSection id="celerraPage" key="CELERRAPRO" headerText="@Resource(key='CELERRAPRO', bundle='fma')"
								   contentClass="com.emc.fma.views.Configuration.FileServer.celerraFileServer"/>
		
		<section:UxLazyLoadSection  id="centeraPage" key="CENTERAPRO" headerText="@Resource(key='CENTERAPRO', bundle='fma')"
									contentClass="com.emc.fma.views.Configuration.FileServer.centraFileServer"/>
		
		<section:UxLazyLoadSection  id="dataDomainPage" key="DATADOMAINPRO" headerText="@Resource(key='DATADOMAINPRO', bundle='fma')"
									contentClass="com.emc.fma.views.Configuration.FileServer.dataDomainFileServer"/>
		
		<section:UxLazyLoadSection  id="isilonPage" key="ISILONPRO" headerText="@Resource(key='ISILONPRO', bundle='fma')"
									contentClass="com.emc.fma.views.Configuration.FileServer.isilonFileServer"/>
		
		<section:UxLazyLoadSection  id="netAppPage" key="NETAPPPRO" headerText="@Resource(key='NETAPPPRO', bundle='fma')"
									contentClass="com.emc.fma.views.Configuration.FileServer.netAppFileServer"/>
		
		<section:UxLazyLoadSection  id="windowsPage" key="WINDOWSPRO" headerText="@Resource(key='WINDOWSPRO', bundle='fma')"
									contentClass="com.emc.fma.views.Configuration.FileServer.windowsFileServer"/>
		
		<section:UxLazyLoadSection  id="amazonS3Page" key="AMAZONS3PRO" headerText="@Resource(key='AMAZONS3PRO', bundle='fma')"
									contentClass="com.emc.fma.views.Configuration.FileServer.AmazonS3FileServer"/>

		<section:UxLazyLoadSection  id="azurePage" key="AZUREPRO" headerText="@Resource(key='AZUREPRO', bundle='fma')"
									contentClass="com.emc.fma.views.Configuration.FileServer.AzureFileServer"/>
	</fxs:Declarations>
	<UxViewBlock xmlns="com.emc.efx.guitoolkit.components.views.*" 
				 id="viewBlock"
				 title="{ResourceManager.getInstance().getString('fma','FIL_SER_LST')}" 
				 width="100%" height="100%"
				 xmlns:fx="com.emc.efx.guitoolkit.components.table.filter.*"
				 xmlns:table="com.emc.ecuit.flex.components.table.*" 
				 xmlns:views="com.emc.ecuit.flex.components.views.*"
				 showRefresh="true" showExport="true" showFind="false" 
				 showPrint="false" showTools="true" showFilter="true" 
				 helpServiceID="FMAHelpService" helpID="GetFileServerList" 
				 xmlns:tx="com.emc.efx.guitoolkit.components.table.*"
				 viewTitleBarButtonClick="_viewTitleBarButtonClickHandler(event)"
				 creationComplete="_init(event)"
				 xmlns:filter="com.emc.efx.guitoolkit.components.filter.*"
				 xmlns:filter1="com.emc.efx.guitoolkit.filter.*"
				 xmlns:buttons="com.emc.efx.guitoolkit.components.buttons.*"
				 xmlns:rules="com.emc.efx.guitoolkit.components.table.rules.*">
		
		
		
		
		<dataview:UxDataViewPanel title="Sample Data View Selection Panel"
							id="Sample_Data_View_Seleciton_Panel"
							width="100%"
							height="100%">
			<dataview:viewContainers>
				<fxs:Array>
					<dataview:UxDataViewCanvas defaultDisplayedView="true">
						<tx:UxAdvancedDataGrid id="fileServerList" tableModel="{new FileServerModel()}" 
											   showHeaders = "true" click="_clickHandlerFileServerModel(event)"
                         doubleClickEnabled="true" itemDoubleClick="_detailFileServer(event);"
											   editable="false" useRollOver="false"	  			 
											   allowMultipleSelection="false">
							<tx:tableColumnViewInfo>
								<mx:ArrayCollection>
									<tx:UxTableColumnViewInformation columnKey="Column1" colWidth="400"  />
									<tx:UxTableColumnViewInformation columnKey="Column2" colWidth="400"  />
									<tx:UxTableColumnViewInformation columnKey="Column3" colWidth="50" colHidden="true" />
									<tx:UxTableColumnViewInformation columnKey="Column4" colWidth="400"/>
									<tx:UxTableColumnViewInformation columnKey="Column5" colWidth="50" colHidden="true"/>
								</mx:ArrayCollection>
							</tx:tableColumnViewInfo>
							
						</tx:UxAdvancedDataGrid>
						<dataview:associatedCommandButtons>
							<fxs:Array>
								<!-- Properties button, it is enabled when only item was selected-->
								<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_ADD')}" click="_addFileServer(event)" />
								<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_EDT')}" click="_detailFileServer(event)" enabled="{fileServerList.selectedItem == null ? false : true }"/>
								<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_VER')}" click="_verifyFileServer(event)"  enabled="{fileServerList.selectedItem == null ? false : true }" />
								<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_DEL')}" click="_deleteFileServer(event)" enabled="{fileServerList.selectedItem == null ? false : true }"/>
							</fxs:Array>
						</dataview:associatedCommandButtons>
					</dataview:UxDataViewCanvas>
					<dataview:UxDataViewCanvas viewType="2"
										 defaultDisplayedView="false">
						<dataview:UxDataViewList id="fileServerListTileView" dataModel="{new FileServerViewModel()}" itemRenderer="com.emc.efx.guitoolkit.components.views.dataview.renderers.UxTileViewRenderer"/>
						<dataview:associatedCommandButtons>
							<fxs:Array>
								<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_ADD')}" click="_addFileServer(event)"  />
								<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_EDT')}" click="_detailFileServerTileView(event)"  enabled="{fileServerListTileView.selectedItem == null ? false : true }" />
								<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_VER')}" click="_verifyFileServerTileView(event)" enabled="{fileServerListTileView.selectedItem == null ? false : true }" />
								<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_DEL')}" click="_deleteFileServerTileView(event)" enabled="{fileServerListTileView.selectedItem == null ? false : true }"/>
							</fxs:Array>
						</dataview:associatedCommandButtons>
					</dataview:UxDataViewCanvas>
				</fxs:Array>
			</dataview:viewContainers>
		</dataview:UxDataViewPanel>
		
		
	<!--	<tx:UxTablePanel width="100%" height="100%">
			<tx:filterPanel>
				<fx:UxTableFilterPanel id="myTableFilterPanel">
					<fx:filterGroups>
						<fxs:Array>
							<filter:UxFilterComboxBox label="{ResourceManager.getInstance().getString('fma','FIL_SER_SER_TYP')}">
								<filter:filterOptions>
									<fxs:Array>
										<filter1:UxAllFilter label="All">
										</filter1:UxAllFilter>
										
										<fx:UxTableColumnFilter label="AmazonS3">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="AmazonS3"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
										
										<fx:UxTableColumnFilter label="Atmos">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="Atmos"/>
											</fx:rules>
										</fx:UxTableColumnFilter>

										<fx:UxTableColumnFilter label="Azure">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="Azure"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
										
										<fx:UxTableColumnFilter label="Celerra">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="Celerra"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
										
										<fx:UxTableColumnFilter label="Centera">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="Centera"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
										
										<fx:UxTableColumnFilter label="Data Domain">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="Data Domain"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
										
										<fx:UxTableColumnFilter label="Isilon">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="Isilon"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
										
										<fx:UxTableColumnFilter label="NetApp">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="NetApp"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
										
										<fx:UxTableColumnFilter label="Windows">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="Windows"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
										
										<fx:UxTableColumnFilter label="VNX">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="VNX"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
										
										<fx:UxTableColumnFilter label="VNXe">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="1" searchValue="VNXe"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
									</fxs:Array>
								</filter:filterOptions>
							</filter:UxFilterComboxBox>
							<filter:UxFilterComboxBox label="{ResourceManager.getInstance().getString('fma','FIL_SER_IS_SOUR')}">
								<filter:filterOptions>
									<fxs:Array>
										<filter1:UxAllFilter label="All">
										</filter1:UxAllFilter>
										<fx:UxTableColumnFilter label="yes">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="2" searchValue="yes"/>
											</fx:rules>
										</fx:UxTableColumnFilter>
										<fx:UxTableColumnFilter label="no">
											<fx:rules>
												<rules:UxTableModelColumnIDRule filterColumnIndex="2" searchValue=""/>
											</fx:rules>
										</fx:UxTableColumnFilter>
									</fxs:Array>
								</filter:filterOptions>
							</filter:UxFilterComboxBox>
						</fxs:Array>
					</fx:filterGroups>
				</fx:UxTableFilterPanel>
			</tx:filterPanel>
			<tx:UxAdvancedDataGrid id="fileServerList" tableModel="{new FileServerModel()}" 
								   showHeaders = "true" 
								   editable="false" useRollOver="false"	  			 
								   allowMultipleSelection="false">
				<tx:tableColumnViewInfo>
					<mx:ArrayCollection>
						<tx:UxTableColumnViewInformation columnKey="Column1" colWidth="400"  />
						<tx:UxTableColumnViewInformation columnKey="Column2" colWidth="400"  />
						<tx:UxTableColumnViewInformation columnKey="Column3" colWidth="50" colHidden="true" />
						<tx:UxTableColumnViewInformation columnKey="Column4" colWidth="400"/>
						<tx:UxTableColumnViewInformation columnKey="Column5" colWidth="50" colHidden="true"/>
					</mx:ArrayCollection>
				</tx:tableColumnViewInfo>
				
			</tx:UxAdvancedDataGrid>
			<tx:commandPanel>
				<tx:UxTableCommandPanel>
					<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_ADD')}" click="_addFileServer(event)" id="_addserver" />
					<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_EDT')}" click="_detailFileServer(event)" />
					<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_VER')}" click="_verifyFileServer(event)" />
					<buttons:UxButton label="{ResourceManager.getInstance().getString('fma','BUTTON_DEL')}" click="_deleteFileServer(event)"/>
				</tx:UxTableCommandPanel>
			</tx:commandPanel>
		</tx:UxTablePanel>	-->
		
	</UxViewBlock>
</UxVBoxWindow>
