import com.emc.ecuit.flex.components.application.ProgressMonitor;
import com.emc.ecuit.flex.components.controls.IPAddressControl;
import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
import com.emc.ecuit.flex.components.wizards.ECUITWizard;
import com.emc.ecuit.flex.components.wizards.ECUITWizardEvent;
import com.emc.ecuit.flex.managers.ECUITResourceManager;
import com.emc.efx.guitoolkit.dataloading.IUxLoader;
import com.emc.efx.guitoolkit.dataloading.UxLoadingHandler;
import com.emc.fma.model.SchemaManager.SchemaConverter;
import com.emc.fma.model.SchemaManager.vo.NetAppVO;
import com.emc.fma.utils.Common;
import com.emc.fma.utils.RESTClient;
import com.emc.fma.utils.RESTEvent;
import com.emc.fma.views.Configuration.FileServer.wizard.CIFSSpecific;
import com.emc.fma.views.Configuration.FileServer.wizard.DirectoryExclusion;
import com.emc.fma.views.Configuration.FileServer.wizard.IPAddressList;
import com.emc.fma.views.Configuration.FileServer.wizard.NDMPSpecific;
import com.emc.fma.views.Configuration.FileServer.wizard.NameStep;

import mx.collections.ArrayCollection;
import mx.resources.ResourceManager;
import mx.utils.StringUtil;

private var _initialized:Boolean = false;
private var next:Boolean = false;
private var serverRoundTripNotHappen:Boolean = true;
[Bindable]private var fsName:String;
[Bindable]private var fsType:String;
[Bindable]private var netAdd:String;

override public function postDisplay():void 
{
  if ( !_initialized ) 
    _initialized = true;

  fsName = getData(NameStep.ATTR_NAME).toString();
  fsType = ResourceManager.getInstance().getString('fma','NETAPP');
  netAdd = getData(IPAddressList.ATTR_IPList_Static_List).getItemAt(0);
  if ( serverRoundTripNotHappen )
  {
    enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
    enableButtons(true, ECUITWizard.ECUITWIZARD_BUTTONID_FINISH);
    enableButtons(true, ECUITWizard.ECUITWIZARD_BUTTONID_BACK);
  }
  if ( !serverRoundTripNotHappen )
  {
    enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
    enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_FINISH);
    enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_BACK); 
    serverRoundTripNotHappen = false;
  }
}
var _netappServer:NetAppVO ;
private function OnGetIPStatus(event:RESTEvent):void
{
  if ( Common.showResponseMessage(this, event) ){
    enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
    enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_FINISH);
    enableButtons(true, ECUITWizard.ECUITWIZARD_BUTTONID_BACK);
    serverRoundTripNotHappen = true ;
    return;
  }
 
  if(ip != _netappServer.IP.getItemAt(0)){
    Common.showErrorDialog(this,_netappServer.Name + " " + Common.getResource("INVALID_DNS_RESOLVE_PREFIX")  + " " +  _netappServer.IP.getItemAt(0) + " " + Common.getResource("INVALID_DNS_RESOLVE_POSTFIX")+ " " + ip)
    enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
    enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_FINISH);
    enableButtons(true, ECUITWizard.ECUITWIZARD_BUTTONID_BACK);
    serverRoundTripNotHappen = true ;
    return ;
  }
  if ( getData(CIFSSpecific.ATTR_userName) != "" )
  {
    _netappServer.Cifs.User = getData(CIFSSpecific.ATTR_userName)as String;
    _netappServer.Cifs.Password = getData(CIFSSpecific.ATTR_password)as String;
    _netappServer.Cifs.Domain = getData(CIFSSpecific.ATTR_domainName)as String;
    _netappServer.Cifs.IsFQDN = getData(CIFSSpecific.ATTR_ISQUALIFIED)as String;
  }
  if ( getData(NDMPSpecific.ATTR_userName) != "" )
  {
    _netappServer.Ndmp.User = getData(NDMPSpecific.ATTR_userName) as String;
    _netappServer.Ndmp.Password = getData(NDMPSpecific.ATTR_password) as String;
    _netappServer.Ndmp.Port = getData(NDMPSpecific.ATTR_port) as String;
  }
  if ( ! (getData(NetAppAsSource.ATTR_ASSOURCE) as Boolean ) )
    _netappServer.Source = null;
  else
  {
    _netappServer.Source.Admin.User = getData(NetAppLocalAdmin.ATTR_userName) as String;
    _netappServer.Source.Admin.Password = getData(NetAppLocalAdmin.ATTR_password) as String;
    
    var _tmpArray2:Array = new Array();
    for each (var _tmpStr:String in getData(DirectoryExclusion.ATTR_DIREX))
      _tmpArray2.push(_tmpStr);
    _netappServer.Source.DirExclusions.Dir = new ArrayCollection(_tmpArray2); 
    
    var _tmpArray3:Array = new Array();
    for each (var _tmpObj1:Object in getData(FPolicyCallBackAgent.ATTR_PRIMARYAGENT))
      _tmpArray3.push(_tmpObj1.name);
    _netappServer.Source.Fpolicy.Primary = new ArrayCollection(_tmpArray3); 
    
    var _tmpArray4:Array = new Array();
    for each (var _tmpObj2:Object in getData(FPolicyCallBackAgent.ATTR_SECONDRYAGENT))
      _tmpArray4.push(_tmpObj2.name);
    _netappServer.Source.Fpolicy.Secondary = new ArrayCollection(_tmpArray4); 
    
    _netappServer.Source.Fpolicy.Passthrough = "enable";
    _netappServer.Source.Fpolicy.LargeFiles = "disable";
  }
  if ( getData(IPAddressList.ATTR_CSIP) != "" )
    _netappServer.HostIP = getData(IPAddressList.ATTR_CSIP) as String;
  
  var xml:XML = SchemaConverter.VOtoXML("FileServers",_netappServer); 
  trace(xml);
  
  RESTClient.sendPostRequest("/api/server", xml, OnSaveStatus, progress);
  stepComplete = true;
}

override public function doFinish():void
{
  _netappServer = new NetAppVO();  
  var ip:String = event.response.IP[0].toString();
  
  _netappServer.Name = getData(NameStep.ATTR_NAME).toString();
  
  for each (var _tmpip:String in getData(IPAddressList.ATTR_IPList_Static_List))
  {
    var _tmpArray1:Array = new Array();
    _tmpArray1.push(_tmpip);
  }
  _netappServer.IP = new ArrayCollection(_tmpArray1); 
  var xml:XML = <Request/>;
  xml.appendChild(<Input type="Resolve" name={_netappServer.Name}  />);
  if ( _netappServer.Source != null )
  {
    xml.appendChild(<Input type="Authenticate"  name={_netappServer.Name}  ip={_netappServer.IP.getItemAt(0)} admin={_netappServer.Source.Admin.User} pwd={_netappServer.Source.Admin.Password} />);
  }
  //RESTClient.sendGetRequest("/api/resolve/" + encodeURIComponent(nameForm.FileServerName.text), OnCommitGetIP, viewBlock);
  RESTClient.sendPostRequest("/api/common/request", xml, OnGetIPStatus, progress);
  
}

private function OnSaveStatus(event:RESTEvent):void
{
  var confirmationHandler:Function = (event.hasStandardResponse && event.response.Code == 0)? OnMessageSuccess:OnMessageFailure;

  // Show response message if available
  if ( Common.showResponseMessage(this, event, confirmationHandler) )
    return;

  // Show the XML string as response
  Common.showErrorDialog(this, event.response.toXMLString(), confirmationHandler);
}

private function OnMessageSuccess(event:Event):void
{
  this.parentWizard.dispatchEvent(new ECUITWizardEvent(ECUITWizardEvent.ECUITWIZ_WIZARDCOMPLETE, this.parentWizard, ECUITWizardEvent.ECUITWIZ_WIZARD_CANCELED));
  serverRoundTripNotHappen = false ;
  // Need to have public updateSelf function to refresh respective component
  this.parentDocument.updateSelf(getData(NameStep.ATTR_NAME).toString());
}

private function OnMessageFailure(event:Event):void
{
  enableButtons(true, ECUITWizard.ECUITWIZARD_BUTTONID_BACK);
  serverRoundTripNotHappen = true;
}
