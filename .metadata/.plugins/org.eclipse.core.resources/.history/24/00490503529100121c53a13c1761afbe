import com.emc.ecuit.flex.components.application.AppTitleBarButton;
import com.emc.ecuit.flex.components.application.ProgressMonitor;
import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
import com.emc.ecuit.flex.components.views.ViewTitleBarButton;
import com.emc.ecuit.flex.components.views.ViewTitleBarButtonEvent;
import com.emc.ecuit.flex.events.ECUITPopupDialogEvent;
import com.emc.ecuit.flex.services.ECUITHelpService;
import com.emc.efx.UxConstants;
import com.emc.efx.core.extensionmgr.UxExtensionManager;
import com.emc.efx.guitoolkit.events.UxViewEvent;
import com.emc.efx.services.navigation.IUxNavigationService;
import com.emc.efx.utilities.map.UxHashMap;
import com.emc.fma.utils.Common;
import com.emc.fma.utils.RESTClient;
import com.emc.fma.utils.RESTEvent;

import mx.collections.ArrayCollection;
import mx.controls.Alert;
import mx.controls.Image;
import mx.events.FlexEvent;
import mx.resources.ResourceManager;

private var _currentPayload:UxHashMap = null;
override protected function initializeData():void
{
  super.initializeData();
  Common.setFocusOnFirstChild(this);
}

protected function _initializeHandler(event:FlexEvent):void
{
}

protected function Commit_clickHandler(event:MouseEvent):void
{
  if ( password.text != confirmPassword.text )
  {
    Common.showErrorDialog(this, Common.getResource('PASSWORD_MISMATCH'));
    return;
  }
  else if ( password.text == "" || confirmPassword.text == "" )
  {
    Common.showErrorDialog(this, Common.getResource('EMPTY_PASSWORD'));
    return;
  }
  var pass:String =  password.text ;
 
  var arrpass:ArrayCollection = new ArrayCollection();
  var ch:Number
  for(var index:int = 0 ; index < pass.length ; index++){
    ch = pass.charCodeAt(index);
    arrpass.addItem(ch);
  }
  pass = arrpass.toString();
  
  var xml:XML = <Request/>;
  xml.appendChild(<Password>{pass}</Password>);
  RESTClient.sendPostRequest("/api/system/user/resetpassword", xml, onComplete, viewBlock);
}

private function onComplete(event:RESTEvent):void
{
  Common.showResponseMessage(this, event, OnCancel, OnCancel, true);
}

[Bindable]
public function set currentPayload(value:UxHashMap):void
{
  _currentPayload = value;
}

public function get currentPayload():UxHashMap
{
  return _currentPayload;
}

private function page_keyDownHandler(event:KeyboardEvent):void
{
  if ( event.keyCode == Keyboard.ESCAPE )
    OnCancel(new MouseEvent(MouseEvent.CLICK));
}

private function OnCancel(event:Event):void
{
  var navService:IUxNavigationService = UxExtensionManager.getInstance().getService(UxConstants.NAVIGATION_SERVICE) as IUxNavigationService;
  var location:Array = new Array;
  location = navService.currentLocation;
  location.pop();
  navService.navigate(location);
}
