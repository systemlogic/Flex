import com.emc.ecuit.flex.components.application.ProgressMonitor;
import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
import com.emc.ecuit.flex.components.filter.FilterPanel;
import com.emc.ecuit.flex.components.table.ECUITAdvancedDataGrid;
import com.emc.ecuit.flex.components.table.ECUITAdvancedDataGridColumn;
import com.emc.ecuit.flex.components.table.ECUITLinkButton;
import com.emc.ecuit.flex.components.table.LinkButtonClickEvent;
import com.emc.ecuit.flex.components.views.ViewBlock;
import com.emc.ecuit.flex.components.views.ViewTitleBarButtonEvent;
import com.emc.ecuit.flex.events.ECUITPopupDialogEvent;
import com.emc.efx.UxConstants;
import com.emc.efx.core.extensionmgr.UxExtensionManager;
import com.emc.efx.guitoolkit.components.table.UxAdvancedDataGridColumn;
import com.emc.efx.guitoolkit.components.views.UxViewTitleButtonHandler;
import com.emc.efx.guitoolkit.dataloading.UxLoadingEvent;
import com.emc.efx.guitoolkit.displaybuilders.UxActionInformation;
import com.emc.efx.guitoolkit.events.UxViewEvent;
import com.emc.fma.utils.Common;
import com.emc.fma.utils.RESTClient;
import com.emc.fma.utils.RESTEvent;
import com.emc.efx.services.navigation.IUxNavigationService;
import com.emc.efx.utilities.map.UxHashMap;
import com.emc.fma.utils.RESTClient;

import mx.controls.Image;
import mx.controls.Menu;
import mx.core.BitmapAsset;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.events.MenuEvent;
import mx.managers.PopUpManager;
import mx.resources.ResourceManager;
import mx.utils.ArrayUtil;

private var setGroupName:String = "";
[Bindable]public var ServerList:XML;
private var _section:UxLazyLoadSection;
import com.emc.fma.views.Policies.NASGroup.model.NASGroupModel;

protected function clickAdd():void
{
  var dialog:AddNASGroup = new AddNASGroup();
  dialog.ref = this;
  dialog.centerDialog();
  dialog.modal = true;
  dialog.show(this.parent);
}

protected function clickEdit():void
{
  var dialog:AddNASGroup = new AddNASGroup();
  dialog.ref = this;
  dialog.centerDialog();
  dialog.editNasGroupName = nasRepoList.selectedItem.Name.toString();
  dialog.modal = true;
  dialog.show(this.parent);
}

public function getNASGroup(_groupName:String=""):void
{
  var xml:XML = <REQUEST/>;
  RESTClient.sendGetRequest("/api/nasgroup", setresponse, viewBlock);
  setGroupName = _groupName;
}

private function setresponse(event:RESTEvent):void
{
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.UNINITIALIZE_DATA));
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.INITIALIZE_DATA));
  viewBlock.lastRefreshDate = new Date();
}

private function fileServerActionHandler(dataObj:Object,pageType:String,name:String,type:String,exp:String):void
{
  var navService:IUxNavigationService = UxExtensionManager.getInstance().getService(UxConstants.NAVIGATION_SERVICE) as IUxNavigationService;
  var map:UxHashMap = new UxHashMap();
  map.put(pageType, dataObj);
  map.put("NASGValue", name);
  map.put("NASGType", type);
  map.put("NASGExp", exp);
  var location:Array = new Array;
  _section.headerText = dataObj["key"];
  location = navService.currentLocation;
  location.push(pageType)
  navService.moveToChild(pageType, map);
}


protected function clickDelete():void
{
  var type:String = nasRepoList.selectedItem.Protocol;
  var name:String = nasRepoList.selectedItem.Name;
  var dlg:ECUITPopupDialog = ECUITPopupDialog.showConfirmDialog(this,"Are you sure you want to delete selected \n\"" + name + "\" nas group ?","Delete NAS Group",ECUITPopupDialog.YES_NO_OPTION );
  dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleYesNoDeleteResult);
}

private function handleYesNoDeleteResult(event:ECUITPopupDialogEvent):void
{
  var name:String = nasRepoList.selectedItem.Name;
  var user_selection:String = event.resultLabel;
  
  if (user_selection == "Yes")
  {
    var xml:XML = <REQUEST/>;
    RESTClient.sendDeleteRequest("/api/nasgroup/" + name, onDelete, viewBlock);
  }
}
private function handleConfirmMessage(event:ECUITPopupDialogEvent):void
{
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.UNINITIALIZE_DATA));
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.INITIALIZE_DATA));
  viewBlock.lastRefreshDate = new Date();
}
private function onDelete(event:RESTEvent):void
{
  viewBlock.updateProgress(100, "default");
  
  if ((new XMLList(event.response.Message).toString()) == "Commited")
  {
    viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.UNINITIALIZE_DATA));
    viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.INITIALIZE_DATA));
    viewBlock.lastRefreshDate = new Date();
  }
  else
  {
    var dlg:ECUITPopupDialog = ECUITPopupDialog.showMessageDialog(this,(new XMLList(event.response.Message).toString()),ResourceManager.getInstance().getString('fma','SERVER_MESSAGE_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
    dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, setresponse);
  }
}

[Bindable]private var _rowsObject:Object = new Object();
public var iconSelection:int = 1;

public function get workingPages():Array
{
  var workingPageArray:Array = new Array();
  workingPageArray.push(nasGPage);
  return workingPageArray;
}

private function calcArrowButtonSize():void
{
  
}
