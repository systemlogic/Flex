import com.emc.ecuit.flex.components.application.ProgressMonitor;
import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
import com.emc.ecuit.flex.components.filter.FilterPanel;
import com.emc.ecuit.flex.components.table.LinkButtonClickEvent;
import com.emc.ecuit.flex.components.views.ViewBlock;
import com.emc.ecuit.flex.components.views.ViewTitleBarButtonEvent;
import com.emc.ecuit.flex.events.ECUITPopupDialogEvent;
import com.emc.efx.UxConstants;
import com.emc.efx.core.extensionmgr.UxExtensionManager;
import com.emc.efx.guitoolkit.components.table.UxAdvancedDataGridColumn;
import com.emc.efx.guitoolkit.components.views.UxViewTitleButtonHandler;
import com.emc.efx.guitoolkit.dataloading.UxLoadingEvent;
import com.emc.efx.guitoolkit.displaybuilders.UxActionInformation;
import com.emc.efx.guitoolkit.events.UxViewEvent;
import com.emc.fma.utils.Common;
import com.emc.fma.utils.RESTClient;
import com.emc.fma.utils.RESTEvent;
import com.emc.efx.services.navigation.IUxNavigationService;
import com.emc.efx.utilities.map.UxHashMap;
import com.emc.fma.views.Configuration.NASRepository.model.NASRepositoryModel;

import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.events.MenuEvent;
import mx.managers.PopUpManager;
import mx.resources.ResourceManager;
import mx.utils.ArrayUtil;

[Bindable]public var ServerList:XML;
private var _section:UxLazyLoadSection;

override protected function initializeData():void
{
  super.initializeData();
  Common.setFocusOnFirstChild(this);
}

protected function clickAdd():void
{
  var dialog:AddNASRepository = new AddNASRepository();
  dialog.ref = this ;
  dialog.centerDialog() ;
  dialog.modal = true;
  dialog.show(this.parent);
}

protected function clickEdit():void
{
  var dialog:AddNASRepository = new AddNASRepository();
  dialog.ref = this ;
  dialog.centerDialog() ;
  dialog.editRepository = nasRepoList.selectedItem;
  dialog.modal = true;
  dialog.show(this.parent);
}

protected function clickDelete():void
{
  var name:String = nasRepoList.selectedItem.Name;
  var dlg:ECUITPopupDialog = ECUITPopupDialog.showConfirmDialog(this,"Are you sure you want to delete \"" + name + "\"", "Delete", ECUITPopupDialog.YES_NO_OPTION );
  dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleYesNoDeleteResult);
}

private function handleYesNoDeleteResult(event:ECUITPopupDialogEvent):void
{
  var name:String = nasRepoList.selectedItem.Name;
  var user_selection:String = event.resultLabel;
  
  if (user_selection == "Yes")
  {
    RESTClient.sendDeleteRequest("/api/repository/" + encodeURIComponent(name.toString()), onDelete, viewBlock);
  }
}

private function onDelete(event:RESTEvent):void
{
  var dlg:ECUITPopupDialog = ECUITPopupDialog.showMessageDialog(this,(new XMLList(event.response)).Message.toString(),ResourceManager.getInstance().getString('fma','CLIENT_ALR') ,ECUITPopupDialog.INFORMATION_MESSAGE);
  dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleConfirmMessage);
}

private function handleConfirmMessage(event:ECUITPopupDialogEvent):void
{
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.UNINITIALIZE_DATA));
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.INITIALIZE_DATA));
  viewBlock.lastRefreshDate = new Date();
}

public function getNASRepository():void
{
  nasRepoList.tableModel.refresh();
}

private function page_keyDownHandler(event:KeyboardEvent):void
{
  if (event.keyCode == Keyboard.ESCAPE)
    OnCancel(new MouseEvent(MouseEvent.CLICK));
}

private function OnCancel(event:Event):void
{
  var navService:IUxNavigationService = UxExtensionManager.getInstance().getService(UxConstants.NAVIGATION_SERVICE) as IUxNavigationService;
  var location:Array = new Array;
  location = navService.currentLocation;
  location.pop();
  navService.navigate(location);
}
