<?xml version="1.0" encoding="utf-8"?>
<wizards:UxWizardStep xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" 
					  xmlns:wizards="com.emc.efx.guitoolkit.components.wizards.*"
					  width="500" height="400" 
					  xmlns:controls="com.emc.ecuit.flex.components.controls.*" 
					  xmlns:views="com.emc.efx.guitoolkit.components.views.*" 
					  xmlns:buttons="com.emc.efx.guitoolkit.components.buttons.*"
					  creationComplete="creationCompleteHandler(event)"
					  backgroundColor="#EAF5FE">
	
	<fx:Script>
		<![CDATA[
			import com.emc.ecuit.flex.components.wizards.ECUITWizard;
			import com.emc.efx.net.UxURL;
			import com.emc.efx.net.http.UxHttpClient;
			import com.emc.fma.views.Configuration.FileServer.wizard.AmazonS3.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.Atmos.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.Centera.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.DataDomain.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.Isilon.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.NetApp.ServerWizard;
			import com.emc.fma.views.Configuration.FileServer.wizard.Windows.ServerWizard;			
			import mx.collections.XMLListCollection;
			import mx.core.INavigatorContent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.resources.ResourceManager;
			
			public static const ATTR_DESTINATION_TYPE:String = "Destination Type";
			
			private var _initialized:Boolean = false;
			private var _client:UxHttpClient;
			private var response:XMLList;
			private var CelerraServerList:XMLListCollection;
			private var DataDomainServerList:XMLListCollection;
			private var IsilonServerList:XMLListCollection;
			private var NetAppServerList:XMLListCollection;
			private var VNXServerList:XMLListCollection;
			private var VNXeServerList:XMLListCollection;
			private var WindowsServerList:XMLListCollection;
			[Bindable]
			private var CeneteraFileServers:XMLListCollection;
			[Bindable]
			private var AtmosFileServers:XMLListCollection;
			[Bindable]
			private var AmazonFileServers:XMLListCollection;			
			[Bindable]
			private var text:String = "Please select secondary server type and click on 'Add New Server' :" + 
				"\n(If selected server type is already added to CTA, click on 'Next' to continue...)"
	

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_client = new UxHttpClient();
				_client.addEventListener(Event.COMPLETE, onComplete);
				var data:ByteArray = new ByteArray();
				var xml:XML = <REQUEST/>; 
				data.writeUTFBytes(xml);
				_client.sendPostRequest(new UxURL(resourceManager.getString('fma','ALLICATION_CONTEXT')+ "getFileServerList.htm"), data);
			}				

			private function onComplete(event:Event):void {
				response = new XMLList(_client.response.body);
				CelerraServerList   = new XMLListCollection(response.FileServer.(elements('Type') == 'Celerra').Name);
				DataDomainServerList= new XMLListCollection(response.FileServer.(elements('Type') == 'DataDomain').Name);
				IsilonServerList 	= new XMLListCollection(response.FileServer.(elements('Type') == 'Isilon').Name);
				NetAppServerList	= new XMLListCollection(response.FileServer.(elements('Type') == 'NetApp').Name);
				VNXServerList		= new XMLListCollection(response.FileServer.(elements('Type') == 'VNX').Name);
				VNXeServerList 		= new XMLListCollection(response.FileServer.(elements('Type') == 'VNXe').Name);
				WindowsServerList 	= new XMLListCollection(response.FileServer.(elements('Type') == 'Windows').Name);
				CeneteraFileServers	= new XMLListCollection(response.FileServer.(elements('Type') == 'Centera').Name);
				AtmosFileServers	= new XMLListCollection(response.FileServer.(elements('Type') == 'Atmos').Name);
				AmazonFileServers	= new XMLListCollection(response.FileServer.(elements('Type') == 'AmazonS3').Name);
				
				if(CelerraServerList != null)
					enableButtons(true, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);		
			} 
			
			override public function postDisplay(): void 
			{
				if (!_initialized) 
				{
					_initialized = true;
				}
				
				enableButtons(true, ECUITWizard.ECUITWIZARD_BUTTONID_BACK);		
				
				if(getData(TaskType.ATTR_TASK_TYPE)=="Archive"){
					SecondaryVBox.visible=false
					SecondaryTabNavigator.visible=true
				}
				else {
					SecondaryTabNavigator.visible=false
					SecondaryVBox.visible=true
				}
				
				validateNext();
				
			}
			
			override protected function save(): void
			{				
				if(!isCurrentStep())return;
				
				if(SecondaryTabNavigator.selectedIndex == 0){
					setData(TaskType.ATTR_SECONDARYTYPE,selectGroupNAS.selectedValue);
					parentWizard.enableStep(Optional.STEP_SECONDARY_SERVER, validate());
				}
				if(SecondaryTabNavigator.selectedIndex == 1){
					setData(TaskType.ATTR_SECONDARYTYPE,selectGroupCAS.selectedValue);
					setData(TaskType.ATTR_SECONDARYSERVER,centeraComboBox.selectedItem);
					parentWizard.enableStep(Optional.STEP_SECONDARY_SERVER, !validate());
					parentWizard.enableStep(Optional.STEP_POLICY, validate());
				}
				if(SecondaryTabNavigator.selectedIndex == 2){
					setData(TaskType.ATTR_SECONDARYTYPE,selectGroupCloud.selectedValue);
					if(atmosRadioButton.selected)
						setData(TaskType.ATTR_SECONDARYSERVER,atmosComboBox.selectedItem);
					else if(amazonRadioButton.selected)
						setData(TaskType.ATTR_SECONDARYSERVER,amazonComboBox.selectedItem);
					parentWizard.enableStep(Optional.STEP_SECONDARY_SERVER, !validate());
					parentWizard.enableStep(Optional.STEP_POLICY, validate());
				}
				
				if(getData(TaskType.ATTR_TASK_TYPE)!="Archive"){
					setData(TaskType.ATTR_SECONDARYTYPE,selectGroup.selectedValue);
					parentWizard.enableStep(Optional.STEP_SECONDARY_SERVER, validate());
				}
				refreshStepTitle();
				
				stepComplete = true;
				
			}
			
			override protected function validate(): Boolean
			{
				return true;
			}
		
			protected function clickHandler1(event:MouseEvent):void
			{
				
				var wizard:Object ;				
				if (celerraRadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard('Celerra');
					wizard.show(this);
				}
				else if (datadomainRadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.DataDomain.ServerWizard();
					wizard.show(this);
				}
				else if (isilonRadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Isilon.ServerWizard();
					wizard.show(this);
				}
				else if (netappRadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.NetApp.ServerWizard();
					wizard.show(this);
				}
				else if (vnxRadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard('VNX');
					wizard.show(this);
				}
				else if (vnxeRadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard('VNXe');
					wizard.show(this);
				}
				else if (windowsRadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Windows.ServerWizard();
					wizard.show(this);
				}
			}
			
			protected function clickHandler2(event:MouseEvent):void{
				var wizard:Object ;	
				wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Centera.ServerWizard();
				wizard.show(this);
			}
			
			protected function clickHandler3(event:MouseEvent):void{
				var wizard:Object ;	
				if (atmosRadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Atmos.ServerWizard();
					wizard.show(this);
				}
				else if (amazonRadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.AmazonS3.ServerWizard();
					wizard.show(this);
				}
			}
			
			protected function cloudchangeHandler(event:ItemClickEvent):void
			{
				if(atmosRadioButton.selected){
					amazonComboBox.visible=false
					atmosComboBox.visible=true
				}					
				else if (amazonRadioButton.selected){
					atmosComboBox.visible=false
					amazonComboBox.visible=true
				}
			}

			protected function clickHandler(event:MouseEvent):void
			{
				var wizard:Object ;				
				if (celerra1RadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard('Celerra');
					wizard.show(this);
				}
				else if (isilon1RadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Isilon.ServerWizard();
					wizard.show(this);
				}
				else if (vnx1RadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard('VNX');
					wizard.show(this);
				}
				else if (vnxe1RadioButton.selected){
					wizard = new com.emc.fma.views.Configuration.FileServer.wizard.Celerra.ServerWizard('VNXe');
					wizard.show(this);
				}
			}
			
			protected function selectGroupNAS_changeHandler(event:Event):void
			{
				validateNext();
			}
			
			private function validateNext():void
			{
				if(celerraRadioButton.selected && CelerraServerList == null)
					enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
				else if (datadomainRadioButton.selected && DataDomainServerList == null)
					enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
				else if (isilonRadioButton.selected && IsilonServerList == null)
					enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
				else if (netappRadioButton.selected && NetAppServerList == null)
					enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
				else if (vnxRadioButton.selected && VNXServerList == null)
					enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
				else if (vnxeRadioButton.selected && VNXeServerList == null)
					enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
				else if (windowsRadioButton.selected && WindowsServerList == null)
					enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
				else
					enableButtons(true, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
			}

			protected function SecondaryTabNavigator_changeHandler(event:IndexChangedEvent):void
			{
				if(SecondaryTabNavigator.selectedIndex == 0)
				{
					
				}
				if(SecondaryTabNavigator.selectedIndex == 1)
				{
					if(centeraRadioButton.selected && CeneteraFileServers == null)
						enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
				}
				if(SecondaryTabNavigator.selectedIndex == 2)
				{
					if(atmosRadioButton.selected && AtmosFileServers == null)
						enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
					if(amazonRadioButton.selected && AmazonFileServers == null)
						enableButtons(false, ECUITWizard.ECUITWIZARD_BUTTONID_NEXT);
				}
			}

		]]>
	</fx:Script>
	
	<mx:TabNavigator id="SecondaryTabNavigator" backgroundColor="#EAF5FE"
					 selectedIndex="0"  tabStyleName="Tab" lastTabStyleName="Tab"
					 historyManagementEnabled="false"  firstTabStyleName="Tab"
					 width="100%" height="100%" change="SecondaryTabNavigator_changeHandler(event)" >
		<mx:Form id="nasForm" label="NAS" width="100%" height="100%">
			<mx:RadioButtonGroup id="selectGroupNAS" change="selectGroupNAS_changeHandler(event)"/>
			<mx:RadioButton label="Celerra" id="celerraRadioButton" selected="true" groupName="selectGroupNAS"/>
			<mx:RadioButton label="DataDomain" id="datadomainRadioButton" groupName="selectGroupNAS"/>
			<mx:RadioButton label="Isilon" id="isilonRadioButton" groupName="selectGroupNAS"/>
			<mx:RadioButton label="NetApp" id="netappRadioButton" groupName="selectGroupNAS"/>
			<mx:RadioButton label="VNX" id="vnxRadioButton" groupName="selectGroupNAS"/>
			<mx:RadioButton label="VNXe" id="vnxeRadioButton" groupName="selectGroupNAS"/>
			<mx:RadioButton label="Windows" id="windowsRadioButton" groupName="selectGroupNAS" paddingBottom="40"/>
			<buttons:UxButton label="Add New Server" click="clickHandler1(event)"/>
		</mx:Form>
		<mx:Form id="casForm" label="CAS" width="100%" height="100%">
			<mx:RadioButtonGroup id="selectGroupCAS" />
			<mx:HBox>
			<mx:RadioButton label="Centera" id="centeraRadioButton" selected="true" groupName="selectGroupCAS" paddingRight="20" paddingBottom="40"/>
			<mx:ComboBox id="centeraComboBox" dataProvider="{CeneteraFileServers}" />	
			</mx:HBox>
			<buttons:UxButton label="Add New Server" click="clickHandler2(event)"/>
		</mx:Form>
		<mx:Form id="cloudForm" label="Cloud" width="100%" height="100%">
			<mx:RadioButtonGroup id="selectGroupCloud" itemClick="cloudchangeHandler(event)"/>
			<mx:HBox>
			<mx:RadioButton label="Atmos" id="atmosRadioButton" selected="true" groupName="selectGroupCloud" paddingRight="20" />
			<mx:ComboBox id="atmosComboBox" visible="true" dataProvider="{AtmosFileServers}" />	
			</mx:HBox>
			<mx:HBox>
			<mx:RadioButton label="Amazon" id="amazonRadioButton" groupName="selectGroupCloud" paddingRight="15" paddingBottom="40" />
			<mx:ComboBox id="amazonComboBox" visible="false" dataProvider="{AmazonFileServers}" />	
			</mx:HBox>
			<buttons:UxButton label="Add New Server" click="clickHandler3(event)"/>
		</mx:Form>
	</mx:TabNavigator>
	
	<mx:VBox id="SecondaryVBox" x="0" y="0" visible="false" width="100%" paddingBottom="15" paddingTop="15" paddingLeft="15" paddingRight="15">
		
		<mx:Text text="{text}" paddingBottom="20"/>
		<mx:RadioButtonGroup id="selectGroup" />
		<mx:RadioButton label="Celerra" id="celerra1RadioButton" selected="true" groupName="selectGroup" paddingLeft="10" />
		<mx:RadioButton label="Isilon" id="isilon1RadioButton" groupName="selectGroup" paddingLeft="10"  />
		<mx:RadioButton label="VNX" id="vnx1RadioButton" groupName="selectGroup" paddingLeft="10" />
		<mx:RadioButton label="VNXe" id="vnxe1RadioButton" groupName="selectGroup" paddingBottom="30" paddingLeft="10" />
		<mx:Button label="Add New Server" click="clickHandler(event)"/>
		
	</mx:VBox>
	
</wizards:UxWizardStep>
