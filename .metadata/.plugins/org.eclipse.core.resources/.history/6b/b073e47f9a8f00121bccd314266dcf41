import com.emc.ecuit.flex.components.application.ProgressMonitor;
import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
import com.emc.ecuit.flex.components.filter.FilterPanel;
import com.emc.ecuit.flex.components.table.ECUITAdvancedDataGrid;
import com.emc.ecuit.flex.components.table.ECUITAdvancedDataGridColumn;
import com.emc.ecuit.flex.components.table.ECUITLinkButton;
import com.emc.ecuit.flex.components.table.LinkButtonClickEvent;
import com.emc.ecuit.flex.components.views.ViewBlock;
import com.emc.ecuit.flex.components.views.ViewTitleBarButtonEvent;
import com.emc.ecuit.flex.events.ECUITPopupDialogEvent;
import com.emc.efx.UxConstants;
import com.emc.efx.core.extensionmgr.UxExtensionManager;
import com.emc.efx.guitoolkit.components.table.UxAdvancedDataGridColumn;
import com.emc.efx.guitoolkit.components.views.UxViewTitleButtonHandler;
import com.emc.efx.guitoolkit.dataloading.UxLoadingEvent;
import com.emc.efx.guitoolkit.displaybuilders.UxActionInformation;
import com.emc.efx.guitoolkit.events.UxViewEvent;
import com.emc.fma.utils.Common;
import com.emc.fma.utils.RESTClient;
import com.emc.fma.utils.RESTEvent;
import com.emc.efx.services.navigation.IUxNavigationService;
import com.emc.efx.utilities.map.UxHashMap;
import com.emc.fma.views.Policies.Expression.model.FileMatchingExpressionModel;

import mx.controls.Image;
import mx.controls.Menu;
import mx.core.BitmapAsset;
import mx.events.CloseEvent;
import mx.events.FlexEvent;
import mx.events.ListEvent;
import mx.events.MenuEvent;
import mx.managers.PopUpManager;
import mx.resources.ResourceManager;
import mx.utils.ArrayUtil;

[Bindable]public var ServerList:XML;
private var setSavedExpressionName:String = "";
import com.emc.fma.views.Policies.NASGroup.model.NASGroupModel;


protected function clickAddEdit(editFlag:Boolean):void
{
  var dialog:AddFileMatchingExpression = new AddFileMatchingExpression();
  dialog.ref = this;
  dialog.centerDialog();
  
  //Check Edit Condition
  if (editFlag)
    dialog.editExpressionName = fileExpList.selectedItem.Name.toString();
  
  dialog.modal = true;
  dialog.show(this.parent);
}

protected function clickDelete():void
{
  var name:String = fileExpList.selectedItem.Name;
  var dlg:ECUITPopupDialog = ECUITPopupDialog.showConfirmDialog(this,"Are you sure you want to delete selected \n\"" + name + "\" expression ?","Delete File Matching Expression", ECUITPopupDialog.YES_NO_OPTION );
  dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleYesNoDeleteResult);
}

private function handleYesNoDeleteResult(event:ECUITPopupDialogEvent):void
{
  var name:String = fileExpList.selectedItem.Name;
  var user_selection:String = event.resultLabel;
  
  if (user_selection == "Yes")
  {
    var xml:XML = <Request/>;
    RESTClient.sendDeleteRequest("/api/savedexpression/" + encodeURIComponent(name), onDelete, viewBlock);
  }
}

private function onDelete(event:RESTEvent):void
{
  Common.showResponseMessage(this, event, OnSuccessClose);
}

public function getSavedExpression(name:String=""):void
{
  if (name == "")
    RESTClient.sendGetRequest("/api/savedexpression", OnSuccessClose, viewBlock);
  else
    OnSuccessClose();
  
  setSavedExpressionName = name;
}

private function OnSuccessClose(event:Event = null):void
{
  refereshGrid();
}

private function refereshGrid():void
{
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.UNINITIALIZE_DATA));
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.INITIALIZE_DATA));
  viewBlock.lastRefreshDate = new Date();
}
