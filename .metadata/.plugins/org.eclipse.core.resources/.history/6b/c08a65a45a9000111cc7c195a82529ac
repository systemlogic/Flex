<?xml version="1.0" encoding="utf-8"?>
<UxVBox xmlns="com.emc.efx.guitoolkit.components.boxes.*"
		xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:carousel="com.emc.efx.guitoolkit.components.carousel.*" 
		xmlns:containers="com.emc.ecuit.flex.components.containers.*"
		xmlns:boxes="com.emc.efx.guitoolkit.components.boxes.*"
		width="100%" paddingLeft="10" paddingRight="10" 
		paddingBottom="10" paddingTop="10" 
		height="100%" implements="com.emc.efx.services.navigation.IUxHasPayload"
		xmlns:buttons="com.emc.efx.guitoolkit.components.buttons.*" 
		xmlns:form="com.emc.fma.views.Configuration.FileServer.form.*" xmlns:table="com.emc.ecuit.flex.components.table.*">
	<fx:Declarations>
		<mx:ArrayCollection id="GridColumns" >
			<fx:Object Name="Column1" Title="Log" />
		</mx:ArrayCollection>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.emc.ecuit.flex.components.application.ProgressMonitor;
			import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
			import com.emc.ecuit.flex.components.table.ECUITAdvancedDataGridColumn;
			import com.emc.ecuit.flex.components.views.ProgressCanvas;
			import com.emc.ecuit.flex.events.ECUITEvent;
			import com.emc.ecuit.flex.services.rest.RestHTTPService;
			import com.emc.efx.UxConstants;
			import com.emc.efx.core.extensionmgr.UxExtensionManager;
			import com.emc.efx.guitoolkit.components.dialogs.UxDialog;
			import com.emc.efx.net.UxURL;
			import com.emc.efx.net.UxURLRequest;
			import com.emc.efx.net.http.UxHttpClient;
			import com.emc.efx.net.http.UxHttpResponse;
			import com.emc.efx.services.navigation.IUxNavigationService;
			import com.emc.efx.utilities.map.UxHashMap;
			
			import flash.sampler.NewObjectSample;
			
			import mx.collections.ArrayCollection;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.Button;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			[Bindable]public var Server:String;
			[Bindable]public var ServerType:String;
			[Bindable]private var _client:UxHttpClient;
			
			private var _currentPayload:UxHashMap = null;
			override protected function initializeData():void {
				super.initializeData();
				if (currentPayload != null) {
					viewBlock.title=currentPayload.getValue("historyType") + " List" ;
					_client = new UxHttpClient();
					_client.addEventListener(Event.COMPLETE, onComplete);
					var data:ByteArray = new ByteArray();
					var xml:XML = <REQUEST/>; 
					xml.appendChild(<action>{currentPayload.getValue("historyType")}</action>);
					xml.appendChild(<startdatetime>{currentPayload.getValue("sttime")}</startdatetime>);
					xml.appendChild(<enddatetime>{currentPayload.getValue("entime")}</enddatetime>);
					xml.appendChild(<cmdname>{currentPayload.getValue("cmd")}</cmdname>);
					xml.appendChild(<username>{currentPayload.getValue("usr")}</username>);
					data.writeUTFBytes(xml);
					_client.sendPostRequest(new UxURL(ResourceManager.getInstance().getString('fma','ALLICATION_CONTEXT')+ "cmdHistory.htm"), data);
					viewBlock.progressMonitor.styleName = "UxProgressCanvasProgressMonitor";
					viewBlock.progressCanvas.setupProgressMonitor(ProgressMonitor.PROGBAR_INDETERMINATE);
					setGridColumns(GridColumns);
				}
			}
			[Bindable]
			public function set currentPayload(value:UxHashMap):void {
				_currentPayload = value;
			}
			
			public function get currentPayload():UxHashMap {
				return _currentPayload;
			}
			
			private function init():void{
				
			}
			[Bindable] private var isilonIPs:ArrayCollection = new ArrayCollection();
			[Bindable] private var excludedDirList:ArrayCollection = new ArrayCollection();
			[Bindable] private var response:XMLList;
			[Bindable]public var _rowsObject:Object = new Object();
			private function onComplete(event:Event):void{
				viewBlock.updateProgress(100, "default");
				response = new XMLList(_client.response.body);
				_rowsObject = createRows4();
			}
			
			private function createRows4():ArrayCollection {
				var count:int = 0;
				var row:Array =  new Array();
				var item:XML;
				for each(item in response.LogFile) {
					var obj:Object = { Column1:item};
					++count;
					row.push(obj); 
				}
				var rows:ArrayCollection = new ArrayCollection(row);
				return rows;
			}
			private function onCanel(event:MouseEvent):void {
				var navService:IUxNavigationService =
					UxExtensionManager.getInstance().getService(UxConstants.
						NAVIGATION_SERVICE) as IUxNavigationService;
				var location:Array = new Array;
				location = navService.currentLocation;
				location.pop();
				navService.navigate(location);
			}
			public function setGridColumns (columns:ArrayCollection):void
			{
				if (columns == null) return;
				trace(columns);
				var tableColumns:ArrayCollection = new ArrayCollection();
				
				for (var i:int = 0; i < GridColumns.length; i++){
					var type:int = ECUITAdvancedDataGridColumn.TEXT; //default column type
					var precision:int = 0; //default precision
					type = ECUITAdvancedDataGridColumn.TEXT;
					
					var column:ECUITAdvancedDataGridColumn = new ECUITAdvancedDataGridColumn(type, precision);
					
					// This conditional builds an instance of a Severity object through a class factory.
					
					column.dataField = GridColumns[i].Name;
					column.headerText = GridColumns[i].Title;
					switch(i){
						case 0 :
							column.width = tabContainer.width  ;
							break ;
					}
					tableColumns.addItem(column);
				}	
				logList.columns = tableColumns.toArray();
			}
			
		]]>
	</fx:Script>
	<UxViewBlock xmlns="com.emc.efx.guitoolkit.components.views.*"
				 id="viewBlock"
				 xmlns:carousel="com.emc.efx.guitoolkit.components.carousel.*" 
				 creationComplete="init()" 
				 title="Atmos Properties" width="100%" height="100%"
				 showRefresh="false" showFilter="false" showFind="false" 
				 showExport="false" showPrint="false" showTools="false"
				 xmlns:boxes="com.emc.efx.guitoolkit.components.boxes.*" 
				 xmlns:containers="com.emc.ecuit.flex.components.containers.*">
		
		
		<mx:Box width="100%" id="tabContainer" paddingLeft="10" paddingBottom="10" height="100%">
			<table:ECUITAdvancedDataGrid id="logList" dataProvider="{_rowsObject}" sortableColumns="false"
										 showHeaders = "true" 
										 editable="false" useRollOver="false"	  			 
										 allowMultipleSelection="false" rowCount="3">
			</table:ECUITAdvancedDataGrid>
			<mx:HBox>
				<buttons:UxButton id="cancelChanges" label="Cancel" click="onCanel(event)" />
			</mx:HBox>
		</mx:Box>
	</UxViewBlock>
</UxVBox>