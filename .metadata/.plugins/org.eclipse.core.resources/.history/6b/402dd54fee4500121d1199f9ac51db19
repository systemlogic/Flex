import com.emc.ecuit.flex.components.application.ProgressMonitor;
import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
import com.emc.ecuit.flex.components.table.ECUITAdvancedDataGridColumn;
import com.emc.ecuit.flex.components.views.ViewTitleBarButton;
import com.emc.ecuit.flex.components.views.ViewTitleBarButtonEvent;
import com.emc.ecuit.flex.events.ECUITPopupDialogEvent;
import com.emc.efx.UxConstants;
import com.emc.efx.core.extensionmgr.UxExtensionManager;
import com.emc.efx.guitoolkit.components.table.UxAdvancedDataGridColumn;
import com.emc.efx.guitoolkit.components.table.UxTableModel;
import com.emc.efx.guitoolkit.dataloading.UxLoadingEvent;
import com.emc.efx.guitoolkit.events.UxViewEvent;
import com.emc.fma.utils.Common;
import com.emc.fma.utils.RESTClient;
import com.emc.fma.utils.RESTEvent;
import com.emc.efx.services.navigation.IUxNavigationService;
import com.emc.efx.utilities.map.UxHashMap;
import com.emc.fma.views.Schedule.Archiver.CreateSchedule.ScheduleWizard;
import com.emc.fma.views.Schedule.Archiver.ScheduleHistory;
import com.emc.fma.views.Schedule.model.ScheduleArchiveModel;
import com.emc.fma.views.Schedule.model.ScheduleBackUpModel;
import com.emc.fma.views.Schedule.model.ScheduleDeleteOrphanModel;
import com.emc.fma.views.Schedule.model.ScheduleDeleteStubModel;
import com.emc.fma.views.Schedule.model.ScheduleFileMigrationModel;
import com.emc.fma.views.Schedule.model.ScheduleImportFilesModel;
import com.emc.fma.views.Schedule.model.ScheduleMultiTierModel;
import com.emc.fma.views.Schedule.model.ScheduleMultiTierStubModel;
import com.emc.fma.views.Schedule.model.ScheduleRepositoryMigrationModel;
import com.emc.fma.views.Schedule.model.ScheduleStubScannerModel;
import com.emc.fma.views.Utility.UtilityFunctionClass;

import mx.controls.Alert;
import mx.controls.Image;
import mx.events.FlexEvent;
import mx.events.MenuEvent;
import mx.resources.ResourceManager;
[Bindable]public var ServerList:XML;
[Bindable]public var type:String = "archiver";

[Bindable]private var _rowsObject:Object = new Object();
private var _section:UxLazyLoadSection;


[Embed(source="../../../../../../../resources/images/assets/schedule_list_16x16.png")]
[Bindable]
public var schedule_list_16x16_Cls:Class;
[Embed(source="../../../../../../../resources/images/assets/schedule_list_22x22.png")]
[Bindable]
public var schedule_list_22x22_Cls:Class;

public function get workingPages():Array
{
  var workingPageArray:Array = new Array();
  workingPageArray.push(historyPage);
  workingPageArray.push(schedulePage);
  return workingPageArray;
}


protected function _viewTitleBarButtonClickHandler(event:ViewTitleBarButtonEvent):void
{

}

private var fr:FileReference;
private static const FILE_TYPES:Array = [new FileFilter("XML File", "*.xml;*.XML")];
[Bindable] public var importFileName:String;
[Bindable] public var importFileData:String;

protected function importLogs_clickHandler(event:MouseEvent):void
{
  if (selectionTest())
  {
    return;
  }

  var tittle:String = ResourceManager.getInstance().getString('fma','IMPORTLOGS');
  _section = historyPage;
  schedulerHistory(
  {key:tittle},historyPage.key,UtilityFunctionClass.DETAILED,UtilityFunctionClass.IMPORTLOGS);

}

protected function import_clickHandler(event:MouseEvent):void
{
  //create the FileReference instance
  fr = new FileReference();

  //listen for when they select a file
  fr.addEventListener(Event.SELECT, onFileSelect);

  //listen for when then cancel out of the browse dialog
  fr.addEventListener(Event.CANCEL,onCancelClk);

  //open a native browse dialog that filters for text files
  fr.browse(FILE_TYPES);
}
private function onFileSelect(e:Event):void
{
  //listen for when the file has loaded
  fr.addEventListener(Event.COMPLETE, onLoadComplete);

  //listen for any errors reading the file
  fr.addEventListener(IOErrorEvent.IO_ERROR, onLoadError);

  //load the content of the file

  fr.load();

}
private function onLoadError(e:IOErrorEvent):void
{
  trace("Error loading file:" + e.text);
}
private function onLoadComplete(e:Event):void
{
  var data:ByteArray = fr.data;
  importFileName = fr.name;
  importFileData = data.readUTFBytes(data.bytesAvailable);
  //PeaFildInput.text = importFileName;
  fr = null;

  var xml:XML = <REQUEST/>;
  xml.appendChild(<action>importFile</action>);
  xml.appendChild(<fileName>
  {importFileName}</fileName>);
  xml.appendChild(<fileData>
  {importFileData}</fileData>);
  RESTClient.sendPostRequest("/actionSchedule.htm", xml, onComplete, viewBlock);
}

private function onCancelClk(e:Event):void
{
  trace("File Browse Canceled");
  fr = null;
}


protected function _init(event:FlexEvent):void
{
  var custViewTitleButton:ViewTitleBarButton =
  new ViewTitleBarButton(ResourceManager.getInstance().getString('fma','ADD_BTN'),
  ViewTitleBarButton.CUSTOM_BTN_TYPE, 0);
  custViewTitleButton.buttonMenuList = titleBarscheduleButtonMenuList;
  custViewTitleButton.buttonMenuEventHandler = _schedule_selection_clickHandler;
  viewBlock.addCustomTitleBarButton(custViewTitleButton);
  custViewTitleButton.setStyle("icon",schedule_list_16x16_Cls);
  custViewTitleButton.setStyle("overIcon", schedule_list_22x22_Cls);
  var tempXMLList:XMLList = new XMLList(titleBarscheduleButtonMenuList);
  viewBlock.title =  "Archive"; //type; First time need to hard code
  //trace(titleBarscheduleButtonMenuList.root[0].label);
  // TODO Auto-generated method stub
}
private function pushing(pageT:String,location:Array,navService:IUxNavigationService):void
{
  location.push(pageT);
  //navService.navigate(location);
  navService.moveToChild(pageT, new UxHashMap());
}
[Bindable]private var obj_arc:UxTableModel = new ScheduleArchiveModel();
/* [Bindable]var obj_mtier:UxTableModel = new ScheduleMultiTierModel();
[Bindable]var obj_mtierStub:UxTableModel = new ScheduleMultiTierStubModel();
[Bindable]var obj_delorphan:UxTableModel = new ScheduleDeleteOrphanModel(); */
protected function _schedule_selection_clickHandler(event:MenuEvent):void
{
  CustomScheduleGrid.dispatchEvent(new UxViewEvent(UxViewEvent.UNINITIALIZE_DATA));

  if (event.label == "Archive")
  {
    CustomScheduleGrid.tableModel = new ScheduleArchiveModel();
    type = "archiver";
  }
  else if (event.label == "Multi Tier")
  {
    CustomScheduleGrid.tableModel = new ScheduleMultiTierModel();
    type = "multitier"
  }
  else if (event.label == "Multi Tier Stub")
  {
    CustomScheduleGrid.tableModel = new ScheduleMultiTierStubModel();
    type = "multitierstub";
  }
  else if (event.label == "Stub Scanner")
  {
    CustomScheduleGrid.tableModel = new ScheduleStubScannerModel();
    type = "stubscanner";
  }
  else if (event.label == "Delete Orphan")
  {
    CustomScheduleGrid.tableModel = new ScheduleDeleteOrphanModel();
    type = "deleteorphan";
  }
  else if (event.label == "Delete Stub")
  {
    CustomScheduleGrid.tableModel = new ScheduleDeleteStubModel();
    type = "deletestub";
  }
  else if (event.label == "Backup")
  {
    CustomScheduleGrid.tableModel = new ScheduleBackUpModel();
    type = "backup";
  }
  else if (event.label == "Repository Migration")
  {
    CustomScheduleGrid.tableModel = new ScheduleRepositoryMigrationModel();
    type = "repositorymigration";
  }
  else if (event.label == "File Migration")
  {
    CustomScheduleGrid.tableModel = new ScheduleFileMigrationModel();
    type = "filemigration";
  }
  else if (event.label == "Import Files")
  {
    CustomScheduleGrid.tableModel = new ScheduleImportFilesModel();
    type = "importarchive";
  }

  CustomScheduleGrid.dispatchEvent(new UxViewEvent(UxViewEvent.INITIALIZE_DATA));
  viewBlock.title = event.label; //type;
  currentState = type;
  /*   var obj1 = CustomScheduleGrid.columns;
    var obj2 = (CustomScheduleGrid.tableModel.columnIdentifiers ).source; */
}
protected function createSchedule_clickHandler(event:MouseEvent):void
{
  var wizard:Object = new com.emc.fma.views.Schedule.Archiver.CreateSchedule.ScheduleWizard();
  wizard.show(this);

}
protected function runNow_clickHandler(event:MouseEvent,actionType:String):void
{
  if (selectionTest())
  {
    return;
  }

  var taskid:String = CustomScheduleGrid.selectedItem.Column0;

  var xml:XML = <REQUEST/>;
  xml.appendChild(<action>runtasknow</action>);
  xml.appendChild(<TaskID>
  {taskid}</TaskID>);
  xml.appendChild(<Simulation>
  {actionType}</Simulation>);
  RESTClient.sendPostRequest("/actionSchedule.htm", xml, onComplete, viewBlock);
}
private function handleConfirmMessage(event:ECUITPopupDialogEvent):void
{
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.UNINITIALIZE_DATA));
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.INITIALIZE_DATA));
  viewBlock.lastRefreshDate = new Date();
}
private function onComplete(event:RESTEvent):void
{
  viewBlock.updateProgress(100, "default");
  var dlg:ECUITPopupDialog = ECUITPopupDialog.showMessageDialog(this,(new XMLList(event.response)).Result[0].toString(),ResourceManager.getInstance().getString('fma','SERVER_MESSAGE_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
  dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleConfirmMessage);
}


protected function edit_clickHandler(event:MouseEvent):void
{
  if (selectionTest())
  {
    return;
  }

  _section = schedulePage;
  var pageType:String = schedulePage.key;
  var tittle:String = ResourceManager.getInstance().getString('fma','SCHEDULEPRO');
  var navService:IUxNavigationService = UxExtensionManager.getInstance().getService(UxConstants.NAVIGATION_SERVICE) as IUxNavigationService;
  var map:UxHashMap = new UxHashMap();
  map.put(pageType,
  {key:tittle} );
  map.put("TaskId", CustomScheduleGrid.selectedItem.Column0 );
  map.put("Heading",tittle);
  map.put("state",currentState);
  var location:Array = new Array;
  _section.headerText = tittle;
  location = navService.currentLocation;
  location.push(pageType)
  navService.moveToChild(pageType, map);

}

private function schedulerHistory(dataObj:Object,pageType:String,simulationType:String,logType:String):void
{
  var navService:IUxNavigationService = UxExtensionManager.getInstance().getService(UxConstants.NAVIGATION_SERVICE) as IUxNavigationService;
  var map:UxHashMap = new UxHashMap();
  map.put(pageType, dataObj);
  map.put("TaskId", CustomScheduleGrid.selectedItem.Column0 );
  map.put("Type",logType);
  map.put("simulationType",simulationType);
  map.put("Heading",dataObj["key"])
  var location:Array = new Array;
  _section.headerText = dataObj["key"];
  location = navService.currentLocation;
  location.push(pageType)
  navService.moveToChild(pageType, map);
}
protected function History_clickHandler(event:MouseEvent):void
{
  if (selectionTest())
  {
    return;
  }

  _section = historyPage;
  var tittle:String = ResourceManager.getInstance().getString('fma','HISTORY');
  schedulerHistory(
  {key:tittle },historyPage.key,UtilityFunctionClass.NO,type);
}
protected function simulation_clickHandler(event:MouseEvent):void
{
  if (selectionTest())
  {
    return;
  }

  var tittle:String = ResourceManager.getInstance().getString('fma','SIMHISTORY');
  _section = historyPage;
  schedulerHistory(
  {key:tittle},historyPage.key,UtilityFunctionClass.DETAILED,type);
}

protected function run_quick_sim_clickHandler(event:MouseEvent):void
{
  if (selectionTest())
  {
    return;
  }

  var taskid:String = CustomScheduleGrid.selectedItem.Column0;

  var xml:XML = <REQUEST/>;
  xml.appendChild(<action>runtasknow</action>);
  xml.appendChild(<TaskID>
  {taskid}</TaskID>);
  xml.appendChild(<Simulation>summary</Simulation>);
  RESTClient.sendPostRequest("/actionSchedule.htm", xml, onComplete, viewBlock);
}
protected function run_Detailed_clickHandler(event:MouseEvent):void
{
  // TODO Auto-generated method stub

}
private function changeStatus(status:Boolean):void
{
  var taskid:String = CustomScheduleGrid.selectedItem.Column0;

  var xml:XML = <REQUEST/>;
  xml.appendChild(<action>enableDisableTask</action>);
  xml.appendChild(<TaskID>
  {taskid}</TaskID>);
  xml.appendChild(<Enable>
  {status}</Enable>);
  RESTClient.sendPostRequest("/actionSchedule.htm", xml, onComplete, viewBlock);
}
protected function enable_clickHandler(event:MouseEvent):void
{
  if (selectionTest())
  {
    return;
  }

  var taskid:String = CustomScheduleGrid.selectedItem.Column6;

  if (taskid == "Enable")
  {
    changeStatus(false);
  }
  else if (taskid == "Disabled")
  {
    changeStatus(true);
  }

}

protected function stop_clickHandler(event:MouseEvent):void
{
  if (selectionTest())
  {
    return;
  }

  var taskid:String = CustomScheduleGrid.selectedItem.Column0;

  var xml:XML = <REQUEST/>;
  xml.appendChild(<action>stoptask</action>);
  xml.appendChild(<TaskID>
  {taskid}</TaskID>);
  RESTClient.sendPostRequest("/actionSchedule.htm", xml, onComplete, viewBlock);

}
private function selectionTest():Boolean
{
  if (CustomScheduleGrid.selectedItem == null )
  {
    ECUITPopupDialog.showMessageDialog(this,"No Item Selected",ResourceManager.getInstance().getString('fma','CLIENT_ALR') ,ECUITPopupDialog.INFORMATION_MESSAGE);
    true;
  }

  return false;
}
private function handleYesNoDeleteResult(event:ECUITPopupDialogEvent):void
{
  var taskid:String = CustomScheduleGrid.selectedItem.Column0;

  var xml:XML = <REQUEST/>;
  xml.appendChild(<action>deleteTask</action>);
  xml.appendChild(<TaskID>
  {taskid}</TaskID>);
  RESTClient.sendPostRequest("/actionSchedule.htm", xml, onComplete, viewBlock);
}
protected function delete_clickHandler(event:MouseEvent):void
{
  if (selectionTest())
  {
    return;
  }

  var dlg:ECUITPopupDialog = ECUITPopupDialog.showConfirmDialog(this,"Are you Sure you to delete " + CustomScheduleGrid.selectedItem.Column0, "Delete", ECUITPopupDialog.YES_NO_OPTION );
  dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleYesNoDeleteResult);
}



