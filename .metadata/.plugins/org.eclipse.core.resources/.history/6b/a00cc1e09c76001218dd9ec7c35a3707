import com.emc.ecuit.flex.components.application.ProgressMonitor;
import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
import com.emc.ecuit.flex.events.ECUITPopupDialogEvent;
import com.emc.efx.UxConstants;
import com.emc.efx.core.extensionmgr.UxExtensionManager;
import com.emc.efx.services.navigation.IUxNavigationService;
import com.emc.efx.utilities.map.UxHashMap;
import com.emc.fma.utils.Common;
import com.emc.fma.utils.RESTClient;
import com.emc.fma.utils.RESTEvent;
import com.emc.fma.views.Configuration.FileServer.form.NameForm;

import mx.collections.ArrayCollection;
import mx.events.FlexEvent;
import mx.resources.ResourceManager;

[Bindable] public var importFileName:String;
[Bindable] public var importFileData:String;
[Bindable] private var fileList:ArrayCollection = new ArrayCollection();
[Bindable] private var response:XML;

private var fr:FileReference;
private static const FILE_TYPES:Array = [new FileFilter("XML File", "*.xml;*.XML")];

protected function add_clickHandler(event:MouseEvent):void
{
  //create the FileReference instance
  fr = new FileReference();

  //listen for when they select a file
  fr.addEventListener(Event.SELECT, onFileSelect);

  //listen for when then cancel out of the browse dialog
  fr.addEventListener(Event.CANCEL,onCancelClk);

  //open a native browse dialog that filters for text files
  fr.browse(FILE_TYPES);
}
private function onFileSelect(e:Event):void
{
  //listen for when the file has loaded
  fr.addEventListener(Event.COMPLETE, onLoadComplete);

  //listen for any errors reading the file
  fr.addEventListener(IOErrorEvent.IO_ERROR, onLoadError);

  //load the content of the file

  fr.load();

}
private function onCancelClk(e:Event):void
{
  trace("File Browse Canceled");
  fr = null;
}
private function onLoadComplete(e:Event):void
{
  
  for each (var obj:Object in sidList.dataProvider)
  {
    if (obj.toString() == fr.name)
    {
      Common.showErrorDialog(this,"File with this name already exist.");
      return;
    }
  }
  
  if(fr.data.length == 0){
    Common.showErrorDialog(this,"Empty file can not be uploaded");
    return;
  }
  var data:ByteArray = fr.data;
  
  importFileName = fr.name;
  importFileData = data.readUTFBytes(data.bytesAvailable);
  //PeaFildInput.text = importFileName;
  fr = null;

  var xml:XML = <Request/>;
  xml.appendChild(<fileName>{importFileName}</fileName>);
  xml.appendChild(<fileData>{importFileData}</fileData>);
  RESTClient.sendPostRequest("/api/settings/sid", xml, OnSaveComplete, viewBlock);
}

protected function OnSaveComplete(event:RESTEvent):void
{
  if ( event.hasStandardResponse )
  {
    Common.showResponseMessage(this, event, OnCancel);
    return;
  }
}

//called if an error occurs while loading the file contents
private function onLoadError(e:IOErrorEvent):void
{
  trace("Error loading file:" + e.text);
}
private function handleYesNoDeleteResult(event:ECUITPopupDialogEvent):void
{
  var user_selection:String = event.resultLabel;

  if (user_selection == "Yes")
  {
    var fileName:String = fileList.getItemAt(sidList.selectedIndex).toString();
    RESTClient.sendDeleteRequest("/api/settings/sid/" + encodeURIComponent(fileName), OnDeleteComplete, viewBlock);
  }

}

protected function OnDeleteComplete(event:RESTEvent):void
{
  if ( event.hasStandardResponse )
  {
    Common.showResponseMessage(this, event, OnCancel);
    return;
  }
}

protected function remove_clickHandler(event:MouseEvent):void
{
  if (sidList.selectedIndex == -1)
  {
    ECUITPopupDialog.showMessageDialog(this,ResourceManager.getInstance().getString('fma','INVALID_DELETION'),ResourceManager.getInstance().getString('fma','INVALID_DELETION_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
    return;
  }

  var temp:String = fileList.getItemAt(sidList.selectedIndex).toString();
  var mess:String  = ResourceManager.getInstance().getString('fma','INVALID_DELETE') + temp;
  var dlg:ECUITPopupDialog = ECUITPopupDialog.showConfirmDialog(this,mess, "Delete", ECUITPopupDialog.YES_NO_OPTION );
  dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleYesNoDeleteResult);

}
protected function _initializeHandler(event:FlexEvent):void
{
}

private function OnGetComplete(event:RESTEvent):void
{
  if ( event.hasStandardResponse )
  {
    Common.showResponseMessage(this, event);
    return;
  }

  response = event.response;
  var temp:String = response.Error;

  if (temp != "")
  {
    ECUITPopupDialog.showMessageDialog(this,temp,ResourceManager.getInstance().getString('fma','SERVER_MESSAGE_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
    return;
  }

  fileList = new ArrayCollection();

  for each (var fileName:XML in response..FileName )
  {
    fileList.addItem(fileName);
  }
}

private var _currentPayload:UxHashMap = null;
override protected function initializeData():void
{
  super.initializeData();
  Common.setFocusOnFirstChild(this);

  RESTClient.sendGetRequest("/api/settings/sid", OnGetComplete, viewBlock);
}

[Bindable]
public function set currentPayload(value:UxHashMap):void
{
  _currentPayload = value;
}

public function get currentPayload():UxHashMap
{
  return _currentPayload;
}

private function page_keyDownHandler(event:KeyboardEvent):void
{
  if (event.keyCode == Keyboard.ESCAPE)
    OnCancel(new MouseEvent(MouseEvent.CLICK));
}

private function OnCancel(event:Event):void
{
  var navService:IUxNavigationService = UxExtensionManager.getInstance().getService(UxConstants.NAVIGATION_SERVICE) as IUxNavigationService;
  var location:Array = new Array;
  location = navService.currentLocation;
  location.pop();
  navService.navigate(location);
}
