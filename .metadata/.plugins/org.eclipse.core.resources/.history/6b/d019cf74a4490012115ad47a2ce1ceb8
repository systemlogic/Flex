import com.emc.ecuit.flex.components.application.ProgressMonitor;
import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
import com.emc.ecuit.flex.events.ECUITEvent;
import com.emc.ecuit.flex.events.ECUITPopupDialogEvent;
import com.emc.efx.UxConstants;
import com.emc.efx.core.extensionmgr.UxExtensionManager;
import com.emc.efx.guitoolkit.events.UxViewEvent;
import com.emc.fma.utils.Common;
import com.emc.fma.utils.RESTClient;
import com.emc.fma.utils.RESTEvent;
import com.emc.efx.services.navigation.IUxNavigationService;
import com.emc.efx.utilities.map.UxHashMap;
import com.emc.fma.utils.Common;

import mx.collections.ArrayCollection;
import mx.controls.Button;
import mx.events.CloseEvent;
import mx.events.DropdownEvent;
import mx.events.FlexEvent;
import mx.resources.ResourceManager;
import mx.utils.ArrayUtil;
private var response:XMLList;
[Bindable]private var fileAttributeArray:ArrayCollection = new ArrayCollection();
[Bindable]private var operatorArray:ArrayCollection = new ArrayCollection();
[Bindable]public var rulesArray:ArrayCollection = new ArrayCollection();
[Bindable]public var expArray:ArrayCollection;
[Bindable]public var checkexpArray:ArrayCollection;
[Bindable]public var NameValue:String;

private var responseResult:XMLList;
private var _currentPayload:UxHashMap = null;
private var action:String = null;
override protected function initializeData():void
{
  super.initializeData();
  _creationCompleteHandler();
  Common.setFocusOnFirstChild(this);

  if (currentPayload != null)
  {
    var dataObj:String = currentPayload.getValue("ExpName");
    action = currentPayload.getValue("action");

    if (dataObj != "")
    {
      var tempExpArray:Array = (currentPayload.getValue("Expression")).split(" and ");

      if (expArray == null)
      {
        expArray = new ArrayCollection()
        checkexpArray = new ArrayCollection();
      }

      for each (var num:String in tempExpArray)
      {
        expArray.addItem(num);
        checkexpArray.addItem(num);
      }

      NameValue = dataObj;
      Name.editable = false;
    }

    var ruleNameList:ArrayCollection = ( currentPayload.getValue("ruleList")) as ArrayCollection;
    rulesArray = ruleNameList;
  }
}
[Bindable] public function set currentPayload(value:UxHashMap):void
{
  _currentPayload = value;
}
public function get currentPayload():UxHashMap
{
  return _currentPayload;
}



protected function _creationCompleteHandler():void
{
  fileAttributeArray.addItem("last_accessed");
  fileAttributeArray.addItem("last_modified");
  fileAttributeArray.addItem("last_attr_changed");
  fileAttributeArray.addItem("size");
  fileAttributeArray.addItem("filename");
  fileAttributeArray.addItem("dirname");
  fileAttributeArray.addItem("rules");

  if (expArray == null)
  {
    expArray = new ArrayCollection()
  }

  if (checkexpArray == null)
  {
    checkexpArray = new ArrayCollection()
  }

}

private function page_keyDownHandler(event:KeyboardEvent):void
{
  if (event.keyCode == Keyboard.ESCAPE)
  {
    onCancel(event);
  }
}


private function getList(event:Event):void
{

}
private function onCancel(event:Event):void
{
  var navService:IUxNavigationService =
  UxExtensionManager.getInstance().getService(UxConstants.
  NAVIGATION_SERVICE) as IUxNavigationService;
  var location:Array = new Array;
  location = navService.currentLocation;
  location.pop();
  navService.navigate(location);
}


private function onOK(event:Event):void
{

  if (Name.text == "")
  {
    ECUITPopupDialog.showMessageDialog(this,ResourceManager.getInstance().getString('fma','EMPTY_NAME'),ResourceManager.getInstance().getString('fma','EMPTY_NAME_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
    return;
  }

  var xml:XML = <REQUEST/>;
  xml.appendChild(<action>
  {action}</action>);
  xml.appendChild(<Name>
  {Name.text}</Name>);

  var tempA:Array;

  for each (var num:String in expArray)
  {
    if (!checkexpArray.contains(num))
    {
      tempA = (num as String).split(" ");

      if (tempA[1] == ">" || tempA[1] == ">="
      || tempA[1] == "<" || tempA[1] == "<=")
      {
        var rule:XML = <Rule/>;
        rule.appendChild(<Keyword>
        {tempA[0]}</Keyword>);
        rule.appendChild(<Operator>
        {tempA[1]}</Operator>);
        rule.appendChild(<Value>
        {tempA[2]}</Value>);
        rule.appendChild(<Unit>
        {tempA[3]}</Unit>);
        xml.appendChild(rule);
      }
      else if (tempA[1] == "==" )
      {
        var rule:XML = <Rule/>;
        rule.appendChild(<Keyword>
        {tempA[0]}</Keyword>);
        rule.appendChild(<Operator>
        {tempA[1]}</Operator>);
        var str:String  = tempA[2];
        str = str.replace("\"", "");
        str = str.replace("\"", "");
        rule.appendChild(<Value>
        {str}</Value>);
        rule.appendChild(<Unit>Undefined</Unit>);
        xml.appendChild(rule);
      }
      else if (tempA[2] == "regex" || tempA[2] == "singlefile")
      {
        var rule:XML = <Rule/>;
        rule.appendChild(<Keyword>
        {tempA[0]}</Keyword>);
        rule.appendChild(<Operator>
        {tempA[1] + " " + tempA[2]}</Operator>);
        var str:String  = tempA[3];
        str = str.replace("\"", "");
        str = str.replace("\"", "");
        rule.appendChild(<Value>
        {str}</Value>);
        rule.appendChild(<Unit>Undefined</Unit>);
        xml.appendChild(rule);
      }
      else
      {
        var str:String  = num as String;
        str = str.replace("$", "");
        str = str.replace("\"", "");
        str = str.replace("\"", "");
        var rule:XML = <RuleRef/>;
        rule.appendChild(<Symbol>
        {str}</Symbol>);
        xml.appendChild(rule);
      }
    }
  }

  for each (var num:String in checkexpArray)
  {
    if (!expArray.contains(num))
    {
      var rule:XML = <DeletePiece/>;
      rule.appendChild(<Index>
      {checkexpArray.getItemIndex(num)}</Index>);
      xml.appendChild(rule);
    }
  }

  RESTClient.sendPostRequest("/saveExpression.htm", xml, save, viewBlock);
}
private function handleConfirmMessage(event:ECUITPopupDialogEvent):void
{
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.UNINITIALIZE_DATA));
  viewBlock.progressCanvas.dispatchEvent(new UxViewEvent(UxViewEvent.INITIALIZE_DATA));
  viewBlock.lastRefreshDate = new Date();
  onCancel(event);
}
private function save(event:RESTEvent):void
{
  viewBlock.updateProgress(100, "default");
  var dlg:ECUITPopupDialog = ECUITPopupDialog.showMessageDialog(this,(new XMLList(event.response)).Result[0].toString(),ResourceManager.getInstance().getString('fma','SERVER_MESSAGE_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
  dlg.addEventListener(ECUITPopupDialogEvent.POPUP_DIALOG_RESULT, handleConfirmMessage);
}
protected function fAttribute_closeHandler(event:DropdownEvent):void
{
  if (fAttribute.selectedLabel == "last_accessed" ||
  fAttribute.selectedLabel == "last_modified" ||
  fAttribute.selectedLabel == "last_attr_changed")
  {
    operatorArray = new ArrayCollection();
    operatorArray.addItem(">");
    operatorArray.addItem(">=");
    operatorArray.addItem("<");
    operatorArray.addItem("<=");
    currentState = "empty";
  }
  else if (fAttribute.selectedLabel == "size")
  {
    operatorArray = new ArrayCollection();
    operatorArray.addItem(">");
    operatorArray.addItem(">=");
    operatorArray.addItem("<");
    operatorArray.addItem("<=");
    currentState = "empty";
  }
  else if (fAttribute.selectedLabel == "filename")
  {
    operatorArray = new ArrayCollection();
    operatorArray.addItem("equals");
    operatorArray.addItem("matches regex");
    currentState = "empty";
  }
  else if (fAttribute.selectedLabel == "dirname")
  {
    operatorArray = new ArrayCollection();
    operatorArray.addItem("equals");
    operatorArray.addItem("matches regex");
    operatorArray.addItem("matches singlefile");
    currentState = "empty";
  }
  else if (fAttribute.selectedLabel == "rules")
  {
    operatorArray = new ArrayCollection();
    operatorArray = rulesArray;
    currentState = "ruleState";
  }
}


protected function operator_closeHandler(event:DropdownEvent):void
{
  if ((fAttribute.selectedLabel == "last_accessed" ||
  fAttribute.selectedLabel == "last_modified" ||
  fAttribute.selectedLabel == "last_attr_changed") &&
  (operator.selectedLabel == ">=" ||
  operator.selectedLabel == ">" ||
  operator.selectedLabel == "<=" ||
  operator.selectedLabel == "<"))
  {
    currentState = "logicalTimeCompaire";
  }
  else if (fAttribute.selectedLabel == "size" &&
  (operator.selectedLabel == ">=" ||
  operator.selectedLabel == ">" ||
  operator.selectedLabel == "<=" ||
  operator.selectedLabel == "<"))
  {
    currentState = "logicalSizeCompaire";
  }
  else if (fAttribute.selectedLabel == "filename" &&
  operator.selectedLabel == "equals" ||
  operator.selectedLabel == "matches regex")
  {
    currentState = "fileState";
  }
  else if (fAttribute.selectedLabel == "dirname" &&
  operator.selectedLabel == "equals" ||
  operator.selectedLabel == "matches regex" ||
  operator.selectedLabel == "matches singlefile")
  {
    currentState = "fileState";
  }
}


protected function addTime_clickHandler(event:MouseEvent):void
{
  var temp:String;
  var timeString:String = "";

  if (timeCombo.selectedLabel == "year(s)")
  {
    timeString = "years";
  }
  else if (timeCombo.selectedLabel == "month(s)")
  {
    timeString = "months";
  }
  else if (timeCombo.selectedLabel == "week(s)")
  {
    timeString = "weeks";
  }
  else if (timeCombo.selectedLabel == "day(s)")
  {
    timeString = "days";
  }

  temp = fAttribute.selectedLabel + " "  + operator.selectedLabel + " " + timeAttribute.text + " " + timeString;
  expArray.addItem(temp);
  exp.dataProvider = expArray;
}


protected function addSize_clickHandler(event:MouseEvent):void
{
  var temp:String;
  var sizeString:String = "";

  if (sizeCombo.selectedLabel == "terabyte(s)")
  {
    sizeString = "terabytes";
  }
  else if (sizeCombo.selectedLabel == "gigabyte(s)")
  {
    sizeString = "gigabytes";
  }
  else if (sizeCombo.selectedLabel == "megabyte(s)")
  {
    sizeString = "megabytes";
  }
  else if (sizeCombo.selectedLabel == "kilobyte(s)")
  {
    sizeString = "kilobytes";
  }
  else if (sizeCombo.selectedLabel == "byte(s)")
  {
    sizeString = "bytes";
  }

  temp = fAttribute.selectedLabel + " "  + operator.selectedLabel + " " + sizeAttribute.text + " " + sizeString;
  expArray.addItem(temp);
  exp.dataProvider = expArray;

}

protected function search_clickHandler(event:MouseEvent):void
{
  var temp:String;
  var searchString:String = "";

  if (operator.selectedLabel == "equals")
  {
    temp = fAttribute.selectedLabel + " == " +  '"' + searchAttribute.text +  '"';
  }
  else
  {
    temp = fAttribute.selectedLabel + " " + operator.selectedLabel + " " +   '"' + searchAttribute.text  +   '"';
  }
  expArray.addItem(temp);
  exp.dataProvider = expArray;
}

protected function rule_clickHandler(event:MouseEvent):void
{
  var temp:String;
  var ruleString:String = "";
  temp = "$" + '"' + operator.selectedLabel + '"';

  if (!expArray.contains(temp))
  {
    expArray.addItem(temp);
    exp.dataProvider = expArray;
  }
}

protected function del_clickHandler(event:MouseEvent):void
{
  if (exp.selectedItem == null)
  {
    ECUITPopupDialog.showMessageDialog(this,ResourceManager.getInstance().getString('fma','INVALID_EXP'),ResourceManager.getInstance().getString('fma','INVALID_EXP_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
    return;
  }

  expArray.removeItemAt(exp.selectedIndex);
}

