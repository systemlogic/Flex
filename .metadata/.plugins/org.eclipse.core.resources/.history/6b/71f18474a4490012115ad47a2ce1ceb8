import com.emc.fma.views.Utility.UtilityFunctionClass;
import com.emc.ecuit.flex.components.application.ProgressMonitor;
import com.emc.ecuit.flex.components.dialogs.ECUITPopupDialog;
import com.emc.ecuit.flex.components.views.ProgressCanvas;
import com.emc.ecuit.flex.events.ECUITEvent;
import com.emc.ecuit.flex.services.rest.RestHTTPService;
import com.emc.efx.UxConstants;
import com.emc.efx.core.extensionmgr.UxExtensionManager;
import com.emc.efx.guitoolkit.components.dialogs.UxDialog;
import com.emc.efx.services.navigation.IUxNavigationService;
import com.emc.efx.utilities.map.UxHashMap;
import com.emc.fma.utils.Common;
import com.emc.fma.utils.RESTClient;
import com.emc.fma.utils.RESTEvent;
import com.emc.fma.model.SchemaManager.SchemaConverter;
import com.emc.fma.model.SchemaManager.vo.AtmosVO;

import flash.sampler.NewObjectSample;

import mx.collections.ArrayCollection;
import mx.controls.AdvancedDataGrid;
import mx.controls.Button;
import mx.events.CloseEvent;
import mx.managers.PopUpManager;
import mx.resources.ResourceManager;

[Bindable]public var Server:String;
[Bindable]public var ServerType:String;

private var _currentPayload:UxHashMap = null;
override protected function initializeData():void
{
  super.initializeData();
  Common.setFocusOnFirstChild(this);

  if (currentPayload != null)
  {
    var dataObj:String = currentPayload.getValue("ServerType");

    if (dataObj != null)
    {
      Server = currentPayload.getValue("Server");
      ServerType = currentPayload.getValue("ServerType");
      viewBlock.title=ServerType + " "+ ResourceManager.getInstance().getString('fma','FIL_SER_PRP');

      // Send GET request to the server
      RESTClient.sendGetRequest("/api/server/"+Server, OnGetServerStatus, viewBlock);
    }
  }
}

private function OnGetServerStatus(event:RESTEvent):void
{
  if ( event.hasStandardResponse )
  {
    Common.showResponseMessage(this, event, onCancel);
    return;
  }
  trace(event.response);

  try
  {
    var serverType:String = event.response.children()[0].localName();
    var errorString:String = "";
    if ( serverType != ServerType )
      throw new Error("Expecting " + ServerType + " server, but returned " + serverType);

    var atmosVO:AtmosVO = SchemaConverter.XMLtoVO(serverType, event.response);
    if ( atmosVO == null )
      throw new Error("Error converting XML to AtmosVO.\n" + event.response.toXMLString());

    nameForm.FileServerName.text = atmosVO.Name
    UserAccount.text = atmosVO.UID;
    Password.text = atmosVO.SharedSecret;
    DNS.text = atmosVO.DNSName;
    port.text  = atmosVO.Port;
    protocol.selectedIndex = ( atmosVO.HttpProtocol == "HTTP" )? 0:1;
  }
  catch (error:Error)
  {
    Common.showErrorDialog(this, error.message, onCancel);
  }
}

private function page_keyDownHandler(event:KeyboardEvent):void
{
  if (event.keyCode == Keyboard.ESCAPE)
    onCancel(new MouseEvent(MouseEvent.CLICK));
}

[Bindable]
public function set currentPayload(value:UxHashMap):void
{
  _currentPayload = value;
}

public function get currentPayload():UxHashMap
{
  return _currentPayload;
}

private function init():void
{
}

private function onOK(event:MouseEvent):void
{
  // Create the VO object first from the form elements
  var atmosVO = new AtmosVO();
  atmosVO.Name = nameForm.FileServerName.text;
  atmosVO.DNSName = DNS.text;
  atmosVO.UID = UserAccount.text;
  atmosVO.SharedSecret = Password.text;
  atmosVO.Port = port.text;
  atmosVO.HttpProtocol = protocol.selectedItem.toString();

  // Validate the ATMOS object
  if ( atmosVO.UID == "" || atmosVO.SharedSecret == "")
  {
    ECUITPopupDialog.showMessageDialog(this,ResourceManager.getInstance().getString('fma','EMPTY_USERPASS'),ResourceManager.getInstance().getString('fma','EMPTY_USERPASS_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
    return;
  }

  var check:int = atmosVO.DNSName.search(UtilityFunctionClass.Domain);
  if ( atmosVO.DNSName == ""  || check == -1 )
  {
    ECUITPopupDialog.showMessageDialog(this,ResourceManager.getInstance().getString('fma','INVALID_DNS_NAME'),ResourceManager.getInstance().getString('fma','INVALID_DNS_NAME_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
    return;
  }

  if ( atmosVO.Port == "" )
  {
    ECUITPopupDialog.showMessageDialog(this,ResourceManager.getInstance().getString('fma','INVALID_PORT'),ResourceManager.getInstance().getString('fma','INVALID_PORT_HEADER'),ECUITPopupDialog.INFORMATION_MESSAGE);
    return;
  }

  var xml:XML = SchemaConverter.VOtoXML("FileServers", atmosVO); 
  trace(xml);

  RESTClient.sendPutRequest("/api/server/" + atmosVO.Name, xml, OnPutComplete, viewBlock);
}

private function OnPutComplete(event:RESTEvent):void
{
  Common.showResponseMessage(this, event);
}

private function onCancel(event:MouseEvent):void
{
  var navService:IUxNavigationService = UxExtensionManager.getInstance().getService(UxConstants.NAVIGATION_SERVICE) as IUxNavigationService;
  var location:Array = new Array;
  location = navService.currentLocation;
  location.pop();
  navService.navigate(location);
}

